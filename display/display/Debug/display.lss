
display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000016be  00001752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000323  00800102  00800102  00001754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000017c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fbe  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc0  00000000  00000000  0000385e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e4d  00000000  00000000  0000441e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  0000626c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b34  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129f  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  000082f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_7>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	52 0b       	sbc	r21, r18

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee eb       	ldi	r30, 0xBE	; 190
      7e:	f6 e1       	ldi	r31, 0x16	; 22
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 30       	cpi	r26, 0x02	; 2
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	24 e0       	ldi	r18, 0x04	; 4
      8e:	a2 e0       	ldi	r26, 0x02	; 2
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a5 32       	cpi	r26, 0x25	; 37
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 9d 08 	call	0x113a	; 0x113a <main>
      b6:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <DisplayNeopixelA4>:
// pBuf stored in R25:R24
// ucCounter stored in R23:R22, in this key R22 - number of LED.

DisplayNeopixelA4:

	mov		ZL, R24
      be:	e8 2f       	mov	r30, r24
	mov		ZH, R25
      c0:	f9 2f       	mov	r31, r25
	
	mov		R23,param2
      c2:	76 2f       	mov	r23, r22
	add		R23,param2	// *2
      c4:	76 0f       	add	r23, r22
	add		R23,param2	// *3
      c6:	76 0f       	add	r23, r22
	mov		param2,R23
      c8:	67 2f       	mov	r22, r23

	cli					// disable interrupts
      ca:	f8 94       	cli

	ld		param,Z+	// get first Byte
      cc:	21 91       	ld	r18, Z+
	ldi		param1,8	// always 8 bit per Byte
      ce:	38 e0       	ldi	r19, 0x08	; 8

000000d0 <LoopByteDelay>:
//	ldi		param2,24	// 24 Bytes / 3 = 8 neopixel LEDs

LoopByteDelay:			//			|	|	|	4	|	|	11
	nop					// 1 cycle	|	|	|	5	|	|	12	
      d0:	00 00       	nop
	...

000000d4 <LoopByte>:
	nop					// 1 cycle	|	|	|	6	|	|	13		
LoopByte:				//			|	|	|	|	6	13	|
	sbi		PortD,PIN0	// 2 cycles	0	0	0	8	8	15	15			Begin of TxH
      d4:	58 9a       	sbi	0x0b, 0	; 11
	rol		param		// 1 cycle	1	1	1	|	|	|	|			Bit to Carry flag
      d6:	22 1f       	adc	r18, r18
	dec		param1		// 1 cycle	2	2	2	|	|	|	|			Decrement bit counter. Zero flag set or cleared for this bit loop. dec instruction does not change Carry flag
      d8:	3a 95       	dec	r19
	brcc	EndTH		// 1/2		|	|	|	|	|	|	|			Jump if 0 code
      da:	28 f4       	brcc	.+10     	; 0xe6 <EndTH>
	// T1H				//			3	3	|	|	|	|	|			
	brne	DelayT1H	// 1/2		|	|	|	|	|	|	|			Jump if T1H without loading byte
      dc:	81 f4       	brne	.+32     	; 0xfe <DelayT1H>
						//			4	|	|	|	|	|	|	
	rjmp	Del1		// 2 cycles	6	|	|	|	|	|	|	
      de:	00 c0       	rjmp	.+0      	; 0xe0 <Del1>

000000e0 <Del1>:
Del1:
	rjmp	Del2		// 2 cycles	8	|	|	|	|	|	|	
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <Del2>

000000e2 <Del2>:
Del2:
	ld		param,Z+	// 2 cycles	10	|	|	|	|	|	|	
      e2:	21 91       	ld	r18, Z+
	ldi		param1,8	// 1 cycle	11	|	|	|	|	|	|	
      e4:	38 e0       	ldi	r19, 0x08	; 8

000000e6 <EndTH>:
EndTH:					//			|	10	4	|	|	|	|
	nop					// 1 cycle	|	11	5	|	|	|	|		
      e6:	00 00       	nop
	cbi		PortD,PIN0	// 2 cycles	13	13	7	0	0	0	0			End of TxH, begin TxL
      e8:	58 98       	cbi	0x0b, 0	; 11
	brcs	EndTL		// 1/2		|	|	|	|	|	|	|			Jump if 1 code
      ea:	28 f0       	brcs	.+10     	; 0xf6 <EndTL>
	// T0L				//			|	|	|	|	|	1	|
	brne    DelayT0L	// 1/2		|	|	|	|	|	|	|	
      ec:	59 f4       	brne	.+22     	; 0x104 <DelayT0L>
						//  		|	|	|	|	|	2	|
	rjmp	Del3		// 2 cycles	|	|	|	|	|	4	|	
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <Del3>

000000f0 <Del3>:
Del3:
	rjmp	Del4		// 2 cycles	|	|	|	|	|	6	|							
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <Del4>

000000f2 <Del4>:
Del4:
	ld		param,Z+	// 2 cycles	|	|	|	|	|	8	|
      f2:	21 91       	ld	r18, Z+
	ldi		param1,8	// 1 cycle	|	|	|	|	|	9	|
      f4:	38 e0       	ldi	r19, 0x08	; 8

000000f6 <EndTL>:
EndTL:					//			|	|	|	2	2	|	9		
	brne	LoopByteDelay// 1/2		|	|	|	|	|	|	|		
      f6:	61 f7       	brne	.-40     	; 0xd0 <LoopByteDelay>
						//  		|	|	|	|	3	10	|	
	dec		param2		// 1 cycle	|	|	|	|	4	11	|			Decrement Byte counter	
      f8:	6a 95       	dec	r22
	brne 	LoopByte	// 2 cycles	|	|	|	|	|	|	|	
      fa:	61 f7       	brne	.-40     	; 0xd4 <LoopByte>
	rjmp	PacketEnd	//			|	|	|	|	|	|	|
      fc:	07 c0       	rjmp	.+14     	; 0x10c <PacketEnd>

000000fe <DelayT1H>:
						//			|	|	|	|	|	|	|
DelayT1H:				//			|	5	|	|	|	|	|			Delay for T1H without loading Byte
	rjmp	Del5		// 2 cycles	|	7	|	|	|	|	|
      fe:	00 c0       	rjmp	.+0      	; 0x100 <Del5>

00000100 <Del5>:
Del5:
	nop					// 1 cycle	|	8	|	|	|	|	|		
     100:	00 00       	nop
	rjmp	EndTH		// 2 cycles	|	|	|	|	|	|	|
     102:	f1 cf       	rjmp	.-30     	; 0xe6 <EndTH>

00000104 <DelayT0L>:
						//			|	|	|	|	|	|	|	
DelayT0L:				//			|	|	|	|	|	|	2			Delay for T0L without loading Byte
	rjmp	Del6		// 2 cycles	|	|	|	|	|	|	4
     104:	00 c0       	rjmp	.+0      	; 0x106 <Del6>

00000106 <Del6>:
Del6:
	rjmp	Del7		// 2 cycles	|	|	|	|	|	|	6	
     106:	00 c0       	rjmp	.+0      	; 0x108 <Del7>

00000108 <Del7>:
Del7:
	nop					// 1 cycle	|	|	|	|	|	|	7
     108:	00 00       	nop
	rjmp	EndTL		// 2 cycles	|	|	|	|	|	|	|
     10a:	f5 cf       	rjmp	.-22     	; 0xf6 <EndTL>

0000010c <PacketEnd>:
						//			|	T1H without loading next byte
						//			T1H with loading next byte
	
PacketEnd:
	
	sei					// enable interrupts
     10c:	78 94       	sei
	
	ret
     10e:	08 95       	ret

00000110 <_ZN13CDiagNeopixel9SetLedRGBEhhhh>:
	m_Invalidated = 1;
}

//-----------------------------------------------------------------------------
void CDiagNeopixel::SetLedRGB (uint8_t i, uint8_t ValR, uint8_t ValG, uint8_t ValB)
{
     110:	0f 93       	push	r16
	if (i >= NUMBER_OF_DIAG_LEDS)
     112:	6c 30       	cpi	r22, 0x0C	; 12
     114:	08 f5       	brcc	.+66     	; 0x158 <_ZN13CDiagNeopixel9SetLedRGBEhhhh+0x48>
		return;
	
	if ((m_LedBuf[i].g != ValG) || (m_LedBuf[i].r != ValR) || (m_LedBuf[i].b != ValB))
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	db 01       	movw	r26, r22
     11a:	aa 0f       	add	r26, r26
     11c:	bb 1f       	adc	r27, r27
     11e:	a6 0f       	add	r26, r22
     120:	b7 1f       	adc	r27, r23
     122:	a8 0f       	add	r26, r24
     124:	b9 1f       	adc	r27, r25
     126:	3c 91       	ld	r19, X
     128:	32 13       	cpse	r19, r18
     12a:	08 c0       	rjmp	.+16     	; 0x13c <_ZN13CDiagNeopixel9SetLedRGBEhhhh+0x2c>
     12c:	fd 01       	movw	r30, r26
     12e:	31 81       	ldd	r19, Z+1	; 0x01
     130:	34 13       	cpse	r19, r20
     132:	04 c0       	rjmp	.+8      	; 0x13c <_ZN13CDiagNeopixel9SetLedRGBEhhhh+0x2c>
     134:	fd 01       	movw	r30, r26
     136:	32 81       	ldd	r19, Z+2	; 0x02
     138:	30 17       	cp	r19, r16
     13a:	19 f0       	breq	.+6      	; 0x142 <_ZN13CDiagNeopixel9SetLedRGBEhhhh+0x32>
		m_Invalidated = 1;
     13c:	31 e0       	ldi	r19, 0x01	; 1
     13e:	fc 01       	movw	r30, r24
     140:	34 a3       	std	Z+36, r19	; 0x24
		
	m_LedBuf[i].g = ValG;
     142:	2c 93       	st	X, r18
	m_LedBuf[i].r = ValR;
     144:	fb 01       	movw	r30, r22
     146:	ee 0f       	add	r30, r30
     148:	ff 1f       	adc	r31, r31
     14a:	6e 0f       	add	r22, r30
     14c:	7f 1f       	adc	r23, r31
     14e:	fc 01       	movw	r30, r24
     150:	e6 0f       	add	r30, r22
     152:	f7 1f       	adc	r31, r23
     154:	41 83       	std	Z+1, r20	; 0x01
	m_LedBuf[i].b = ValB;	
     156:	02 83       	std	Z+2, r16	; 0x02
	
}
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <_ZN13CDiagNeopixelC1Ev>:
//-----------------------------------------------------------------------------

// Changed fro arduino nano 

//-----------------------------------------------------------------------------
CDiagNeopixel::CDiagNeopixel()
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	cf 93       	push	r28
     164:	7c 01       	movw	r14, r24
{
	/*
	clrA4();		// noepixel LEDs connected to Arduino NANO A5 pin
	A4output();
	*/
	clrD0(); // version for arduino nano
     166:	58 98       	cbi	0x0b, 0	; 11
	D0output();
     168:	50 9a       	sbi	0x0a, 0	; 10
	for (uint8_t i= 0 ; i < NUMBER_OF_DIAG_LEDS; i++)
     16a:	c0 e0       	ldi	r28, 0x00	; 0
		SetLedRGB(i,0,0,0);
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	6c 2f       	mov	r22, r28
     174:	c7 01       	movw	r24, r14
     176:	0e 94 88 00 	call	0x110	; 0x110 <_ZN13CDiagNeopixel9SetLedRGBEhhhh>
	clrA4();		// noepixel LEDs connected to Arduino NANO A5 pin
	A4output();
	*/
	clrD0(); // version for arduino nano
	D0output();
	for (uint8_t i= 0 ; i < NUMBER_OF_DIAG_LEDS; i++)
     17a:	cf 5f       	subi	r28, 0xFF	; 255
     17c:	cc 30       	cpi	r28, 0x0C	; 12
     17e:	b1 f7       	brne	.-20     	; 0x16c <_ZN13CDiagNeopixelC1Ev+0x10>
		SetLedRGB(i,0,0,0);
		
	m_Invalidated = 1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	f7 01       	movw	r30, r14
     184:	84 a3       	std	Z+36, r24	; 0x24
}
     186:	cf 91       	pop	r28
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>:
	m_LedBuf[i].b = ValB;	
	
}

void CDiagNeopixel::SetLedRGBfromTable(uint8_t table[])
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	00 d0       	rcall	.+0      	; 0x196 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh+0x6>
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t k;
	for(volatile uint8_t i=0;i<NUMBER_OF_DIAG_LEDS;i++)
     19a:	1a 82       	std	Y+2, r1	; 0x02
     19c:	2a 81       	ldd	r18, Y+2	; 0x02
     19e:	2c 30       	cpi	r18, 0x0C	; 12
     1a0:	d8 f5       	brcc	.+118    	; 0x218 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh+0x88>
	{
		k=3*i;
     1a2:	2a 81       	ldd	r18, Y+2	; 0x02
     1a4:	32 2f       	mov	r19, r18
     1a6:	33 0f       	add	r19, r19
     1a8:	23 0f       	add	r18, r19
     1aa:	29 83       	std	Y+1, r18	; 0x01
		this->m_LedBuf[i].r=table[k];
     1ac:	2a 81       	ldd	r18, Y+2	; 0x02
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	49 81       	ldd	r20, Y+1	; 0x01
     1b2:	fb 01       	movw	r30, r22
     1b4:	e4 0f       	add	r30, r20
     1b6:	f1 1d       	adc	r31, r1
     1b8:	40 81       	ld	r20, Z
     1ba:	f9 01       	movw	r30, r18
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	2e 0f       	add	r18, r30
     1c2:	3f 1f       	adc	r19, r31
     1c4:	fc 01       	movw	r30, r24
     1c6:	e2 0f       	add	r30, r18
     1c8:	f3 1f       	adc	r31, r19
     1ca:	41 83       	std	Z+1, r20	; 0x01
		m_LedBuf[i].g=table[k+1];
     1cc:	2a 81       	ldd	r18, Y+2	; 0x02
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	49 81       	ldd	r20, Y+1	; 0x01
     1d2:	fb 01       	movw	r30, r22
     1d4:	e4 0f       	add	r30, r20
     1d6:	f1 1d       	adc	r31, r1
     1d8:	41 81       	ldd	r20, Z+1	; 0x01
     1da:	f9 01       	movw	r30, r18
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	2e 0f       	add	r18, r30
     1e2:	3f 1f       	adc	r19, r31
     1e4:	fc 01       	movw	r30, r24
     1e6:	e2 0f       	add	r30, r18
     1e8:	f3 1f       	adc	r31, r19
     1ea:	40 83       	st	Z, r20
		m_LedBuf[i].b=table[k+2];
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	49 81       	ldd	r20, Y+1	; 0x01
     1f2:	fb 01       	movw	r30, r22
     1f4:	e4 0f       	add	r30, r20
     1f6:	f1 1d       	adc	r31, r1
     1f8:	42 81       	ldd	r20, Z+2	; 0x02
     1fa:	f9 01       	movw	r30, r18
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	2e 0f       	add	r18, r30
     202:	3f 1f       	adc	r19, r31
     204:	fc 01       	movw	r30, r24
     206:	e2 0f       	add	r30, r18
     208:	f3 1f       	adc	r31, r19
     20a:	42 83       	std	Z+2, r20	; 0x02
}

void CDiagNeopixel::SetLedRGBfromTable(uint8_t table[])
{
	volatile uint8_t k;
	for(volatile uint8_t i=0;i<NUMBER_OF_DIAG_LEDS;i++)
     20c:	2a 81       	ldd	r18, Y+2	; 0x02
     20e:	2f 5f       	subi	r18, 0xFF	; 255
     210:	2a 83       	std	Y+2, r18	; 0x02
     212:	2a 81       	ldd	r18, Y+2	; 0x02
     214:	2c 30       	cpi	r18, 0x0C	; 12
     216:	28 f2       	brcs	.-118    	; 0x1a2 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh+0x12>
		k=3*i;
		this->m_LedBuf[i].r=table[k];
		m_LedBuf[i].g=table[k+1];
		m_LedBuf[i].b=table[k+2];
	}
	m_Invalidated=1;
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	fc 01       	movw	r30, r24
     21c:	24 a3       	std	Z+36, r18	; 0x24
}
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <_ZN13CDiagNeopixel7DisplayEv>:


//-----------------------------------------------------------------------------
void CDiagNeopixel::Display()
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
	
	if (!m_Invalidated)
     22c:	fc 01       	movw	r30, r24
     22e:	24 a1       	ldd	r18, Z+36	; 0x24
     230:	22 23       	and	r18, r18
     232:	61 f0       	breq	.+24     	; 0x24c <_ZN13CDiagNeopixel7DisplayEv+0x24>
     234:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     236:	87 e1       	ldi	r24, 0x17	; 23
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_ZN13CDiagNeopixel7DisplayEv+0x12>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <_ZN13CDiagNeopixel7DisplayEv+0x18>
     240:	00 00       	nop
		return;
		
	_delay_us(70);	// reset Neopixel LEDs
	
	DisplayNeopixelA4((char*) m_LedBuf, NUMBER_OF_DIAG_LEDS);
     242:	6c e0       	ldi	r22, 0x0C	; 12
     244:	cf 01       	movw	r24, r30
     246:	0e 94 5f 00 	call	0xbe	; 0xbe <DisplayNeopixelA4>
	
	m_Invalidated = 0;
     24a:	1c a2       	std	Y+36, r1	; 0x24
}
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <__vector_7>:
			timesInSeconds=0;
		while(true)
		{
			if(!readPosControl())
			timesInSeconds++;
			for(uint8_t i=0;i<60;i++)
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	8f 93       	push	r24
     25e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <secondTimerCounter>
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <secondTimerCounter>
     268:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <secondTimerCounter>
     26c:	8d 37       	cpi	r24, 0x7D	; 125
     26e:	29 f4       	brne	.+10     	; 0x27a <__vector_7+0x28>
     270:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <secondTimerCounter>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
     27a:	8f 91       	pop	r24
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <__vector_11>:
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	2f 93       	push	r18
     292:	3f 93       	push	r19
     294:	4f 93       	push	r20
     296:	5f 93       	push	r21
     298:	6f 93       	push	r22
     29a:	7f 93       	push	r23
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
     2a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ready>
     2ac:	88 23       	and	r24, r24
     2ae:	39 f0       	breq	.+14     	; 0x2be <__vector_11+0x38>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <fDisplayed>
     2b6:	8f e2       	ldi	r24, 0x2F	; 47
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13CDiagNeopixel7DisplayEv>
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	bf 91       	pop	r27
     2c4:	af 91       	pop	r26
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	7f 91       	pop	r23
     2cc:	6f 91       	pop	r22
     2ce:	5f 91       	pop	r21
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <_Z13testArtifactsv>:
	}
}


void testArtifacts()
{
     2e0:	2f 92       	push	r2
     2e2:	3f 92       	push	r3
     2e4:	4f 92       	push	r4
     2e6:	5f 92       	push	r5
     2e8:	6f 92       	push	r6
     2ea:	7f 92       	push	r7
     2ec:	8f 92       	push	r8
     2ee:	9f 92       	push	r9
     2f0:	af 92       	push	r10
     2f2:	bf 92       	push	r11
     2f4:	cf 92       	push	r12
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	2f 97       	sbiw	r28, 0x0f	; 15
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
	ready=0;
     314:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ready>
	volatile uint32_t lineCounter=0;
     318:	19 82       	std	Y+1, r1	; 0x01
     31a:	1a 82       	std	Y+2, r1	; 0x02
     31c:	1b 82       	std	Y+3, r1	; 0x03
     31e:	1c 82       	std	Y+4, r1	; 0x04
	secondTimerFlag=0;
     320:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
     324:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     328:	88 23       	and	r24, r24
     32a:	09 f4       	brne	.+2      	; 0x32e <_Z13testArtifactsv+0x4e>
     32c:	43 c0       	rjmp	.+134    	; 0x3b4 <_Z13testArtifactsv+0xd4>
	{
		secondTimerFlag=0;
     32e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if(seconds>=30)
		min_pos++;
}
inline void addSecond()
{
	if(seconds==59){
     332:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     336:	8b 33       	cpi	r24, 0x3B	; 59
     338:	b9 f4       	brne	.+46     	; 0x368 <_Z13testArtifactsv+0x88>
		seconds=0;
     33a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
		if(minutes==59)
     33e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     342:	8b 33       	cpi	r24, 0x3B	; 59
     344:	69 f4       	brne	.+26     	; 0x360 <_Z13testArtifactsv+0x80>
		{
			minutes=0;
     346:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			if(hour==11)
     34a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     34e:	8b 30       	cpi	r24, 0x0B	; 11
     350:	19 f4       	brne	.+6      	; 0x358 <_Z13testArtifactsv+0x78>
				hour=0;
     352:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
     356:	c4 c3       	rjmp	.+1928   	; 0xae0 <__stack+0x1e1>
			else
				hour++;
     358:	8f 5f       	subi	r24, 0xFF	; 255
     35a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
     35e:	c0 c3       	rjmp	.+1920   	; 0xae0 <__stack+0x1e1>
		}
		else
			minutes++;
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     366:	03 c0       	rjmp	.+6      	; 0x36e <_Z13testArtifactsv+0x8e>
	}
	else
		seconds++;
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     36e:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
     372:	83 2f       	mov	r24, r19
	hour_pos=hour*10; 
     374:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hour>
     378:	29 2f       	mov	r18, r25
     37a:	22 0f       	add	r18, r18
     37c:	92 2f       	mov	r25, r18
     37e:	99 0f       	add	r25, r25
     380:	99 0f       	add	r25, r25
     382:	92 0f       	add	r25, r18
     384:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	while(tmp>=6)	
     388:	36 30       	cpi	r19, 0x06	; 6
     38a:	54 f0       	brlt	.+20     	; 0x3a0 <_Z13testArtifactsv+0xc0>
     38c:	9f 5f       	subi	r25, 0xFF	; 255
     38e:	01 c0       	rjmp	.+2      	; 0x392 <_Z13testArtifactsv+0xb2>
     390:	92 2f       	mov	r25, r18
     392:	86 50       	subi	r24, 0x06	; 6
     394:	21 e0       	ldi	r18, 0x01	; 1
     396:	29 0f       	add	r18, r25
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	d4 f7       	brge	.-12     	; 0x390 <_Z13testArtifactsv+0xb0>
     39c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	{
		hour_pos++;
		tmp-=6;
	}
	min_pos=2*minutes;
     3a0:	33 0f       	add	r19, r19
     3a2:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
	if(seconds>=30)
     3a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     3aa:	8e 31       	cpi	r24, 0x1E	; 30
     3ac:	18 f0       	brcs	.+6      	; 0x3b4 <_Z13testArtifactsv+0xd4>
		min_pos++;
     3ae:	3f 5f       	subi	r19, 0xFF	; 255
     3b0:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
 * 		.niddlePosition's
 * we start displaying from 12
*/
inline uint8_t* calculateLine(){
	/* First we need to chose if we need to display one,two or three dotted clock's frame */
	if(exactOneDot == 0){//sprawdzamy dalej
     3b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     3b8:	81 11       	cpse	r24, r1
     3ba:	8a c0       	rjmp	.+276    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		if(exactMinute == 0){//we display on three dots
     3bc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     3c0:	81 11       	cpse	r24, r1
     3c2:	44 c0       	rjmp	.+136    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			if(hour_pos == position){
     3c4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     3c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     3cc:	98 13       	cpse	r25, r24
     3ce:	20 c0       	rjmp	.+64     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				if(min_pos == position){
     3d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     3d4:	98 13       	cpse	r25, r24
     3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <_Z13testArtifactsv+0x114>
					if(seconds*2 == position){
     3d8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	89 2f       	mov	r24, r25
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	09 f4       	brne	.+2      	; 0x3ee <_Z13testArtifactsv+0x10e>
     3ec:	85 c0       	rjmp	.+266    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
						return HoureMinuteSecondOnThreeDots;
					}
					return HoureAndMinutesOnThreeDots;
     3ee:	6d e2       	ldi	r22, 0x2D	; 45
     3f0:	72 e0       	ldi	r23, 0x02	; 2
     3f2:	9f c0       	rjmp	.+318    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				if(seconds*2 == position){
     3f4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	89 2f       	mov	r24, r25
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	28 17       	cp	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	7a c0       	rjmp	.+244    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
					return HouresAndSecondsOnThreeDots;
				}
				return OnylHoureOnThreeDots;
     40a:	69 e9       	ldi	r22, 0x99	; 153
     40c:	72 e0       	ldi	r23, 0x02	; 2
     40e:	91 c0       	rjmp	.+290    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}else{
				if(min_pos == position){
     410:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     414:	89 13       	cpse	r24, r25
     416:	0d c0       	rjmp	.+26     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
					if(seconds*2 == position){
     418:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	28 17       	cp	r18, r24
     426:	39 07       	cpc	r19, r25
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	6c c0       	rjmp	.+216    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
     42c:	65 e0       	ldi	r22, 0x05	; 5
     42e:	73 e0       	ldi	r23, 0x03	; 3
     430:	80 c0       	rjmp	.+256    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				if(seconds*2 == position){
     432:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	28 17       	cp	r18, r24
     440:	39 07       	cpc	r19, r25
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	62 c0       	rjmp	.+196    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
					return OnylSecondsOnThreeDots;
				}
				return NoNiddleThreeDots;
     446:	69 eb       	ldi	r22, 0xB9	; 185
     448:	73 e0       	ldi	r23, 0x03	; 3
     44a:	73 c0       	rjmp	.+230    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
     44c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     450:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     454:	98 13       	cpse	r25, r24
     456:	20 c0       	rjmp	.+64     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				if(min_pos == position){
     458:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     45c:	98 13       	cpse	r25, r24
     45e:	0e c0       	rjmp	.+28     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					if(seconds*2 == position){
     460:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	89 2f       	mov	r24, r25
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	28 17       	cp	r18, r24
     470:	39 07       	cpc	r19, r25
     472:	09 f4       	brne	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	4d c0       	rjmp	.+154    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
     476:	61 e5       	ldi	r22, 0x51	; 81
     478:	72 e0       	ldi	r23, 0x02	; 2
     47a:	5b c0       	rjmp	.+182    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				if(seconds*2 == position){
     47c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	22 0f       	add	r18, r18
     484:	33 1f       	adc	r19, r19
     486:	89 2f       	mov	r24, r25
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	28 17       	cp	r18, r24
     48c:	39 07       	cpc	r19, r25
     48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	42 c0       	rjmp	.+132    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
     492:	6d eb       	ldi	r22, 0xBD	; 189
     494:	72 e0       	ldi	r23, 0x02	; 2
     496:	4d c0       	rjmp	.+154    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}else{
				if(min_pos == position){
     498:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     49c:	89 13       	cpse	r24, r25
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
					if(seconds*2 == position){
     4a0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	22 0f       	add	r18, r18
     4a8:	33 1f       	adc	r19, r19
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	a9 f1       	breq	.+106    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
     4b2:	69 e2       	ldi	r22, 0x29	; 41
     4b4:	73 e0       	ldi	r23, 0x03	; 3
     4b6:	3d c0       	rjmp	.+122    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				if(seconds*2 == position){
     4b8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	28 17       	cp	r18, r24
     4c6:	39 07       	cpc	r19, r25
     4c8:	61 f1       	breq	.+88     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
     4ca:	6d ed       	ldi	r22, 0xDD	; 221
     4cc:	73 e0       	ldi	r23, 0x03	; 3
     4ce:	31 c0       	rjmp	.+98     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
     4d0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     4d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     4d8:	98 13       	cpse	r25, r24
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			if(hour_pos == position){
     4dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour_pos>
     4e0:	98 17       	cp	r25, r24
     4e2:	11 f1       	breq	.+68     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
     4e4:	6d e4       	ldi	r22, 0x4D	; 77
     4e6:	73 e0       	ldi	r23, 0x03	; 3
     4e8:	24 c0       	rjmp	.+72     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		if(hour_pos == position){
     4ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     4ee:	89 17       	cp	r24, r25
     4f0:	f1 f0       	breq	.+60     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	74 e0       	ldi	r23, 0x04	; 4
     4f6:	1d c0       	rjmp	.+58     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	if(exactOneDot == 0){//sprawdzamy dalej
		if(exactMinute == 0){//we display on three dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnThreeDots;
     4f8:	65 e5       	ldi	r22, 0x55	; 85
     4fa:	71 e0       	ldi	r23, 0x01	; 1
     4fc:	1a c0       	rjmp	.+52     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
					}
					return HoureAndMinutesOnThreeDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnThreeDots;
     4fe:	65 ee       	ldi	r22, 0xE5	; 229
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	17 c0       	rjmp	.+46     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				return OnylHoureOnThreeDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnThreeDots;
     504:	6d e9       	ldi	r22, 0x9D	; 157
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	14 c0       	rjmp	.+40     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
     50a:	61 e7       	ldi	r22, 0x71	; 113
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	11 c0       	rjmp	.+34     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
     510:	69 e7       	ldi	r22, 0x79	; 121
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	0e c0       	rjmp	.+28     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
     516:	69 e0       	ldi	r22, 0x09	; 9
     518:	72 e0       	ldi	r23, 0x02	; 2
     51a:	0b c0       	rjmp	.+22     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				}
				return  OnylHoureOnTwoDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
     51c:	61 ec       	ldi	r22, 0xC1	; 193
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	08 c0       	rjmp	.+16     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
     522:	65 e9       	ldi	r22, 0x95	; 149
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	05 c0       	rjmp	.+10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
     528:	65 e7       	ldi	r22, 0x75	; 117
     52a:	72 e0       	ldi	r23, 0x02	; 2
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
     52e:	61 ee       	ldi	r22, 0xE1	; 225
     530:	72 e0       	ldi	r23, 0x02	; 2
	if(fSecondTimerFlag())
	{
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
     532:	8f e2       	ldi	r24, 0x2F	; 47
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     53a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     53e:	8f 5f       	subi	r24, 0xFF	; 255
	if(exactOneDot == 2){
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	19 f0       	breq	.+6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     544:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exactOneDot>
     548:	0c c0       	rjmp	.+24     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
	if(exactOneDot == 2){
		exactOneDot = 0;
     54a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exactOneDot>
		exactMinute ++;
     54e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     552:	8f 5f       	subi	r24, 0xFF	; 255
		if(exactMinute == 5){
     554:	85 30       	cpi	r24, 0x05	; 5
     556:	19 f0       	breq	.+6      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
*/
inline void actualizePosition(){
	exactOneDot ++;
	if(exactOneDot == 2){
		exactOneDot = 0;
		exactMinute ++;
     558:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <exactMinute>
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		if(exactMinute == 5){
			exactMinute = 0;
     55e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exactMinute>
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
	actualizePosition();
	(position>=120-1) ? position=0 : position++;
     562:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     566:	87 37       	cpi	r24, 0x77	; 119
     568:	18 f0       	brcs	.+6      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
     56e:	c3 c2       	rjmp	.+1414   	; 0xaf6 <__stack+0x1f7>
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
     576:	bf c2       	rjmp	.+1406   	; 0xaf6 <__stack+0x1f7>
	calculateLineAndRabin();
	for(uint8_t i=0;i<10;i++)
	{
		while(true)
		{
			if(lineCounter == long(2*i) + long(i*15*120))
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	ab 81       	ldd	r26, Y+3	; 0x03
     57e:	bc 81       	ldd	r27, Y+4	; 0x04
     580:	88 16       	cp	r8, r24
     582:	99 06       	cpc	r9, r25
     584:	aa 06       	cpc	r10, r26
     586:	bb 06       	cpc	r11, r27
     588:	09 f0       	breq	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     58a:	51 c1       	rjmp	.+674    	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
			{
				display.Display();
     58c:	8f e2       	ldi	r24, 0x2F	; 47
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13CDiagNeopixel7DisplayEv>
				volatile uint8_t hue;
				hue=1;
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	9d 83       	std	Y+5, r25	; 0x05
				hue=2;
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	8d 83       	std	Y+5, r24	; 0x05
				hue=hue-hue;
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	2d 81       	ldd	r18, Y+5	; 0x05
     5a0:	82 1b       	sub	r24, r18
     5a2:	8d 83       	std	Y+5, r24	; 0x05
				secondTimerFlag=1;
     5a4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
     5a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     5ac:	88 23       	and	r24, r24
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b0:	43 c0       	rjmp	.+134    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
	{
		secondTimerFlag=0;
     5b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if(seconds>=30)
		min_pos++;
}
inline void addSecond()
{
	if(seconds==59){
     5b6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     5ba:	8b 33       	cpi	r24, 0x3B	; 59
     5bc:	b9 f4       	brne	.+46     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
		seconds=0;
     5be:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
		if(minutes==59)
     5c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5c6:	8b 33       	cpi	r24, 0x3B	; 59
     5c8:	69 f4       	brne	.+26     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
		{
			minutes=0;
     5ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			if(hour==11)
     5ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     5d2:	8b 30       	cpi	r24, 0x0B	; 11
     5d4:	19 f4       	brne	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
				hour=0;
     5d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
     5da:	ab c2       	rjmp	.+1366   	; 0xb32 <__stack+0x233>
			else
				hour++;
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
     5e2:	a7 c2       	rjmp	.+1358   	; 0xb32 <__stack+0x233>
		}
		else
			minutes++;
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
	}
	else
		seconds++;
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     5f2:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
     5f6:	83 2f       	mov	r24, r19
	hour_pos=hour*10; 
     5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hour>
     5fc:	29 2f       	mov	r18, r25
     5fe:	22 0f       	add	r18, r18
     600:	92 2f       	mov	r25, r18
     602:	99 0f       	add	r25, r25
     604:	99 0f       	add	r25, r25
     606:	92 0f       	add	r25, r18
     608:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	while(tmp>=6)	
     60c:	36 30       	cpi	r19, 0x06	; 6
     60e:	54 f0       	brlt	.+20     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     610:	9f 5f       	subi	r25, 0xFF	; 255
     612:	01 c0       	rjmp	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     614:	92 2f       	mov	r25, r18
     616:	86 50       	subi	r24, 0x06	; 6
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	29 0f       	add	r18, r25
     61c:	86 30       	cpi	r24, 0x06	; 6
     61e:	d4 f7       	brge	.-12     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     620:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	{
		hour_pos++;
		tmp-=6;
	}
	min_pos=2*minutes;
     624:	33 0f       	add	r19, r19
     626:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
	if(seconds>=30)
     62a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     62e:	8e 31       	cpi	r24, 0x1E	; 30
     630:	18 f0       	brcs	.+6      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
		min_pos++;
     632:	3f 5f       	subi	r19, 0xFF	; 255
     634:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
 * 		.niddlePosition's
 * we start displaying from 12
*/
inline uint8_t* calculateLine(){
	/* First we need to chose if we need to display one,two or three dotted clock's frame */
	if(exactOneDot == 0){//sprawdzamy dalej
     638:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     63c:	81 11       	cpse	r24, r1
     63e:	8a c0       	rjmp	.+276    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
		if(exactMinute == 0){//we display on three dots
     640:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     644:	81 11       	cpse	r24, r1
     646:	44 c0       	rjmp	.+136    	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
			if(hour_pos == position){
     648:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     64c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     650:	98 13       	cpse	r25, r24
     652:	20 c0       	rjmp	.+64     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				if(min_pos == position){
     654:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     658:	98 13       	cpse	r25, r24
     65a:	0e c0       	rjmp	.+28     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
					if(seconds*2 == position){
     65c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	89 2f       	mov	r24, r25
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	09 f4       	brne	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	85 c0       	rjmp	.+266    	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
						return HoureMinuteSecondOnThreeDots;
					}
					return HoureAndMinutesOnThreeDots;
     672:	6d e2       	ldi	r22, 0x2D	; 45
     674:	72 e0       	ldi	r23, 0x02	; 2
     676:	9f c0       	rjmp	.+318    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				if(seconds*2 == position){
     678:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	89 2f       	mov	r24, r25
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	09 f4       	brne	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	7a c0       	rjmp	.+244    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
					return HouresAndSecondsOnThreeDots;
				}
				return OnylHoureOnThreeDots;
     68e:	69 e9       	ldi	r22, 0x99	; 153
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	91 c0       	rjmp	.+290    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}else{
				if(min_pos == position){
     694:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     698:	89 13       	cpse	r24, r25
     69a:	0d c0       	rjmp	.+26     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
					if(seconds*2 == position){
     69c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     6ae:	6c c0       	rjmp	.+216    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
     6b0:	65 e0       	ldi	r22, 0x05	; 5
     6b2:	73 e0       	ldi	r23, 0x03	; 3
     6b4:	80 c0       	rjmp	.+256    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				if(seconds*2 == position){
     6b6:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	28 17       	cp	r18, r24
     6c4:	39 07       	cpc	r19, r25
     6c6:	09 f4       	brne	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6c8:	62 c0       	rjmp	.+196    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
					return OnylSecondsOnThreeDots;
				}
				return NoNiddleThreeDots;
     6ca:	69 eb       	ldi	r22, 0xB9	; 185
     6cc:	73 e0       	ldi	r23, 0x03	; 3
     6ce:	73 c0       	rjmp	.+230    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
     6d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     6d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     6d8:	98 13       	cpse	r25, r24
     6da:	20 c0       	rjmp	.+64     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
				if(min_pos == position){
     6dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     6e0:	98 13       	cpse	r25, r24
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
					if(seconds*2 == position){
     6e4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	89 2f       	mov	r24, r25
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	28 17       	cp	r18, r24
     6f4:	39 07       	cpc	r19, r25
     6f6:	09 f4       	brne	.+2      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     6f8:	4d c0       	rjmp	.+154    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
     6fa:	61 e5       	ldi	r22, 0x51	; 81
     6fc:	72 e0       	ldi	r23, 0x02	; 2
     6fe:	5b c0       	rjmp	.+182    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				if(seconds*2 == position){
     700:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	89 2f       	mov	r24, r25
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	28 17       	cp	r18, r24
     710:	39 07       	cpc	r19, r25
     712:	09 f4       	brne	.+2      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     714:	42 c0       	rjmp	.+132    	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
     716:	6d eb       	ldi	r22, 0xBD	; 189
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	4d c0       	rjmp	.+154    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}else{
				if(min_pos == position){
     71c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     720:	89 13       	cpse	r24, r25
     722:	0c c0       	rjmp	.+24     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
					if(seconds*2 == position){
     724:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	a9 f1       	breq	.+106    	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
     736:	69 e2       	ldi	r22, 0x29	; 41
     738:	73 e0       	ldi	r23, 0x03	; 3
     73a:	3d c0       	rjmp	.+122    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				if(seconds*2 == position){
     73c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	28 17       	cp	r18, r24
     74a:	39 07       	cpc	r19, r25
     74c:	61 f1       	breq	.+88     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
     74e:	6d ed       	ldi	r22, 0xDD	; 221
     750:	73 e0       	ldi	r23, 0x03	; 3
     752:	31 c0       	rjmp	.+98     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
     754:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     758:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     75c:	98 13       	cpse	r25, r24
     75e:	07 c0       	rjmp	.+14     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
			if(hour_pos == position){
     760:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour_pos>
     764:	98 17       	cp	r25, r24
     766:	11 f1       	breq	.+68     	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
     768:	6d e4       	ldi	r22, 0x4D	; 77
     76a:	73 e0       	ldi	r23, 0x03	; 3
     76c:	24 c0       	rjmp	.+72     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
		}
		if(hour_pos == position){
     76e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     772:	89 17       	cp	r24, r25
     774:	f1 f0       	breq	.+60     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	74 e0       	ldi	r23, 0x04	; 4
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
	if(exactOneDot == 0){//sprawdzamy dalej
		if(exactMinute == 0){//we display on three dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnThreeDots;
     77c:	65 e5       	ldi	r22, 0x55	; 85
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	1a c0       	rjmp	.+52     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
					}
					return HoureAndMinutesOnThreeDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnThreeDots;
     782:	65 ee       	ldi	r22, 0xE5	; 229
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	17 c0       	rjmp	.+46     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				return OnylHoureOnThreeDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnThreeDots;
     788:	6d e9       	ldi	r22, 0x9D	; 157
     78a:	71 e0       	ldi	r23, 0x01	; 1
     78c:	14 c0       	rjmp	.+40     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
     78e:	61 e7       	ldi	r22, 0x71	; 113
     790:	73 e0       	ldi	r23, 0x03	; 3
     792:	11 c0       	rjmp	.+34     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
     794:	69 e7       	ldi	r22, 0x79	; 121
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	0e c0       	rjmp	.+28     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
     79a:	69 e0       	ldi	r22, 0x09	; 9
     79c:	72 e0       	ldi	r23, 0x02	; 2
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
				}
				return  OnylHoureOnTwoDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
     7a0:	61 ec       	ldi	r22, 0xC1	; 193
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
     7a6:	65 e9       	ldi	r22, 0x95	; 149
     7a8:	73 e0       	ldi	r23, 0x03	; 3
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
     7ac:	65 e7       	ldi	r22, 0x75	; 117
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
     7b2:	61 ee       	ldi	r22, 0xE1	; 225
     7b4:	72 e0       	ldi	r23, 0x02	; 2
	if(fSecondTimerFlag())
	{
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
     7b6:	8f e2       	ldi	r24, 0x2F	; 47
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     7be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
	if(exactOneDot == 2){
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	19 f0       	breq	.+6      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     7c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exactOneDot>
     7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
	if(exactOneDot == 2){
		exactOneDot = 0;
     7ce:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exactOneDot>
		exactMinute ++;
     7d2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
		if(exactMinute == 5){
     7d8:	85 30       	cpi	r24, 0x05	; 5
     7da:	19 f0       	breq	.+6      	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
*/
inline void actualizePosition(){
	exactOneDot ++;
	if(exactOneDot == 2){
		exactOneDot = 0;
		exactMinute ++;
     7dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <exactMinute>
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
		if(exactMinute == 5){
			exactMinute = 0;
     7e2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exactMinute>
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
	actualizePosition();
	(position>=120-1) ? position=0 : position++;
     7e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     7ea:	87 37       	cpi	r24, 0x77	; 119
     7ec:	18 f0       	brcs	.+6      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7ee:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
				hue=1;
				hue=2;
				hue=hue-hue;
				secondTimerFlag=1;
				calculateLineAndRabin();
				lineCounter++;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	ab 81       	ldd	r26, Y+3	; 0x03
     800:	bc 81       	ldd	r27, Y+4	; 0x04
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	a1 1d       	adc	r26, r1
     806:	b1 1d       	adc	r27, r1
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	ab 83       	std	Y+3, r26	; 0x03
     80e:	bc 83       	std	Y+4, r27	; 0x04
     810:	2a e0       	ldi	r18, 0x0A	; 10
     812:	82 0e       	add	r8, r18
     814:	27 e0       	ldi	r18, 0x07	; 7
     816:	92 1e       	adc	r9, r18
     818:	a1 1c       	adc	r10, r1
     81a:	b1 1c       	adc	r11, r1
{
	ready=0;
	volatile uint32_t lineCounter=0;
	secondTimerFlag=0;
	calculateLineAndRabin();
	for(uint8_t i=0;i<10;i++)
     81c:	84 e6       	ldi	r24, 0x64	; 100
     81e:	88 16       	cp	r8, r24
     820:	86 e4       	ldi	r24, 0x46	; 70
     822:	98 06       	cpc	r9, r24
     824:	a1 04       	cpc	r10, r1
     826:	b1 04       	cpc	r11, r1
     828:	09 f0       	breq	.+2      	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
     82a:	a6 ce       	rjmp	.-692    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     82c:	98 c1       	rjmp	.+816    	; 0xb5e <__stack+0x25f>
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
     82e:	0f 2e       	mov	r0, r31
     830:	f9 e2       	ldi	r31, 0x29	; 41
     832:	cf 2e       	mov	r12, r31
     834:	f3 e0       	ldi	r31, 0x03	; 3
     836:	df 2e       	mov	r13, r31
     838:	f0 2d       	mov	r31, r0
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
     83a:	0f 2e       	mov	r0, r31
     83c:	f9 e0       	ldi	r31, 0x09	; 9
     83e:	6f 2e       	mov	r6, r31
     840:	f2 e0       	ldi	r31, 0x02	; 2
     842:	7f 2e       	mov	r7, r31
     844:	f0 2d       	mov	r31, r0
				}
				return  OnylHoureOnTwoDots;
     846:	0f 2e       	mov	r0, r31
     848:	fd eb       	ldi	r31, 0xBD	; 189
     84a:	ef 2e       	mov	r14, r31
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	ff 2e       	mov	r15, r31
     850:	f0 2d       	mov	r31, r0
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
     852:	0f 2e       	mov	r0, r31
     854:	f1 e5       	ldi	r31, 0x51	; 81
     856:	4f 2e       	mov	r4, r31
     858:	f2 e0       	ldi	r31, 0x02	; 2
     85a:	5f 2e       	mov	r5, r31
     85c:	f0 2d       	mov	r31, r0
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
     85e:	01 e7       	ldi	r16, 0x71	; 113
     860:	13 e0       	ldi	r17, 0x03	; 3
				lineCounter++;
				break;
			}
			else
			{
				cli();
     862:	f8 94       	cli
				__asm__ __volatile__ ("nop");
     864:	00 00       	nop
				__asm__ __volatile__ ("nop");
     866:	00 00       	nop
				secondTimerFlag=0;
     868:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
     86c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     870:	88 23       	and	r24, r24
     872:	09 f4       	brne	.+2      	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
     874:	42 c0       	rjmp	.+132    	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
	{
		secondTimerFlag=0;
     876:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if(seconds>=30)
		min_pos++;
}
inline void addSecond()
{
	if(seconds==59){
     87a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     87e:	8b 33       	cpi	r24, 0x3B	; 59
     880:	b9 f4       	brne	.+46     	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
		seconds=0;
     882:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
		if(minutes==59)
     886:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     88a:	8b 33       	cpi	r24, 0x3B	; 59
     88c:	69 f4       	brne	.+26     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
		{
			minutes=0;
     88e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			if(hour==11)
     892:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     896:	8b 30       	cpi	r24, 0x0B	; 11
     898:	19 f4       	brne	.+6      	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
				hour=0;
     89a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
     89e:	54 c1       	rjmp	.+680    	; 0xb48 <__stack+0x249>
			else
				hour++;
     8a0:	8f 5f       	subi	r24, 0xFF	; 255
     8a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
     8a6:	50 c1       	rjmp	.+672    	; 0xb48 <__stack+0x249>
		}
		else
			minutes++;
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <__LOCK_REGION_LENGTH__+0x4b6>
	}
	else
		seconds++;
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     8b6:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
     8ba:	83 2f       	mov	r24, r19
	hour_pos=hour*10; 
     8bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hour>
     8c0:	99 0f       	add	r25, r25
     8c2:	29 2f       	mov	r18, r25
     8c4:	22 0f       	add	r18, r18
     8c6:	22 0f       	add	r18, r18
     8c8:	92 0f       	add	r25, r18
     8ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	while(tmp>=6)	
     8ce:	36 30       	cpi	r19, 0x06	; 6
     8d0:	54 f0       	brlt	.+20     	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
     8d2:	9f 5f       	subi	r25, 0xFF	; 255
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
     8d6:	92 2f       	mov	r25, r18
     8d8:	86 50       	subi	r24, 0x06	; 6
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	29 0f       	add	r18, r25
     8de:	86 30       	cpi	r24, 0x06	; 6
     8e0:	d4 f7       	brge	.-12     	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
     8e2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	{
		hour_pos++;
		tmp-=6;
	}
	min_pos=2*minutes;
     8e6:	33 0f       	add	r19, r19
     8e8:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
	if(seconds>=30)
     8ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
     8f0:	8e 31       	cpi	r24, 0x1E	; 30
     8f2:	18 f0       	brcs	.+6      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
		min_pos++;
     8f4:	3f 5f       	subi	r19, 0xFF	; 255
     8f6:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
 * 		.niddlePosition's
 * we start displaying from 12
*/
inline uint8_t* calculateLine(){
	/* First we need to chose if we need to display one,two or three dotted clock's frame */
	if(exactOneDot == 0){//sprawdzamy dalej
     8fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     8fe:	81 11       	cpse	r24, r1
     900:	87 c0       	rjmp	.+270    	; 0xa10 <__stack+0x111>
		if(exactMinute == 0){//we display on three dots
     902:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     906:	81 11       	cpse	r24, r1
     908:	44 c0       	rjmp	.+136    	; 0x992 <__stack+0x93>
			if(hour_pos == position){
     90a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     90e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     912:	98 13       	cpse	r25, r24
     914:	20 c0       	rjmp	.+64     	; 0x956 <__stack+0x57>
				if(min_pos == position){
     916:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     91a:	98 13       	cpse	r25, r24
     91c:	0e c0       	rjmp	.+28     	; 0x93a <__stack+0x3b>
					if(seconds*2 == position){
     91e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	22 0f       	add	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	89 2f       	mov	r24, r25
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	82 c0       	rjmp	.+260    	; 0xa38 <__stack+0x139>
						return HoureMinuteSecondOnThreeDots;
					}
					return HoureAndMinutesOnThreeDots;
     934:	6d e2       	ldi	r22, 0x2D	; 45
     936:	72 e0       	ldi	r23, 0x02	; 2
     938:	9a c0       	rjmp	.+308    	; 0xa6e <__stack+0x16f>
				}
				if(seconds*2 == position){
     93a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	89 2f       	mov	r24, r25
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	28 17       	cp	r18, r24
     94a:	39 07       	cpc	r19, r25
     94c:	09 f4       	brne	.+2      	; 0x950 <__stack+0x51>
     94e:	77 c0       	rjmp	.+238    	; 0xa3e <__stack+0x13f>
					return HouresAndSecondsOnThreeDots;
				}
				return OnylHoureOnThreeDots;
     950:	69 e9       	ldi	r22, 0x99	; 153
     952:	72 e0       	ldi	r23, 0x02	; 2
     954:	8c c0       	rjmp	.+280    	; 0xa6e <__stack+0x16f>
			}else{
				if(min_pos == position){
     956:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     95a:	89 13       	cpse	r24, r25
     95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x79>
					if(seconds*2 == position){
     95e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x73>
     970:	69 c0       	rjmp	.+210    	; 0xa44 <__stack+0x145>
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
     972:	65 e0       	ldi	r22, 0x05	; 5
     974:	73 e0       	ldi	r23, 0x03	; 3
     976:	7b c0       	rjmp	.+246    	; 0xa6e <__stack+0x16f>
				}
				if(seconds*2 == position){
     978:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	28 17       	cp	r18, r24
     986:	39 07       	cpc	r19, r25
     988:	09 f4       	brne	.+2      	; 0x98c <__stack+0x8d>
     98a:	5f c0       	rjmp	.+190    	; 0xa4a <__stack+0x14b>
					return OnylSecondsOnThreeDots;
				}
				return NoNiddleThreeDots;
     98c:	69 eb       	ldi	r22, 0xB9	; 185
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	6e c0       	rjmp	.+220    	; 0xa6e <__stack+0x16f>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
     992:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     996:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     99a:	98 13       	cpse	r25, r24
     99c:	1e c0       	rjmp	.+60     	; 0x9da <__stack+0xdb>
				if(min_pos == position){
     99e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
     9a2:	98 13       	cpse	r25, r24
     9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__stack+0xc1>
					if(seconds*2 == position){
     9a6:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	89 2f       	mov	r24, r25
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	28 17       	cp	r18, r24
     9b6:	39 07       	cpc	r19, r25
     9b8:	09 f4       	brne	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	49 c0       	rjmp	.+146    	; 0xa4e <__stack+0x14f>
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
     9bc:	b2 01       	movw	r22, r4
     9be:	57 c0       	rjmp	.+174    	; 0xa6e <__stack+0x16f>
				}
				if(seconds*2 == position){
     9c0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	89 2f       	mov	r24, r25
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	28 17       	cp	r18, r24
     9d0:	39 07       	cpc	r19, r25
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	3f c0       	rjmp	.+126    	; 0xa54 <__stack+0x155>
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
     9d6:	b7 01       	movw	r22, r14
     9d8:	4a c0       	rjmp	.+148    	; 0xa6e <__stack+0x16f>
			}else{
				if(min_pos == position){
     9da:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     9de:	89 13       	cpse	r24, r25
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <__stack+0xf9>
					if(seconds*2 == position){
     9e2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	91 f1       	breq	.+100    	; 0xa58 <__stack+0x159>
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
     9f4:	b6 01       	movw	r22, r12
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__stack+0x16f>
				}
				if(seconds*2 == position){
     9f8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	51 f1       	breq	.+84     	; 0xa5e <__stack+0x15f>
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
     a0a:	68 85       	ldd	r22, Y+8	; 0x08
     a0c:	79 85       	ldd	r23, Y+9	; 0x09
     a0e:	2f c0       	rjmp	.+94     	; 0xa6e <__stack+0x16f>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
     a10:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
     a14:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     a18:	98 13       	cpse	r25, r24
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__stack+0x12b>
			if(hour_pos == position){
     a1c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour_pos>
     a20:	98 17       	cp	r25, r24
     a22:	01 f1       	breq	.+64     	; 0xa64 <__stack+0x165>
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
     a24:	6e 81       	ldd	r22, Y+6	; 0x06
     a26:	7f 81       	ldd	r23, Y+7	; 0x07
     a28:	22 c0       	rjmp	.+68     	; 0xa6e <__stack+0x16f>
		}
		if(hour_pos == position){
     a2a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
     a2e:	89 17       	cp	r24, r25
     a30:	e1 f0       	breq	.+56     	; 0xa6a <__stack+0x16b>
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
     a32:	63 2d       	mov	r22, r3
     a34:	72 2d       	mov	r23, r2
     a36:	1b c0       	rjmp	.+54     	; 0xa6e <__stack+0x16f>
	if(exactOneDot == 0){//sprawdzamy dalej
		if(exactMinute == 0){//we display on three dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnThreeDots;
     a38:	65 e5       	ldi	r22, 0x55	; 85
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	18 c0       	rjmp	.+48     	; 0xa6e <__stack+0x16f>
					}
					return HoureAndMinutesOnThreeDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnThreeDots;
     a3e:	65 ee       	ldi	r22, 0xE5	; 229
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <__stack+0x16f>
				}
				return OnylHoureOnThreeDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnThreeDots;
     a44:	6d e9       	ldi	r22, 0x9D	; 157
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__stack+0x16f>
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
     a4a:	b8 01       	movw	r22, r16
     a4c:	10 c0       	rjmp	.+32     	; 0xa6e <__stack+0x16f>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
     a4e:	69 e7       	ldi	r22, 0x79	; 121
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	0d c0       	rjmp	.+26     	; 0xa6e <__stack+0x16f>
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
     a54:	b3 01       	movw	r22, r6
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <__stack+0x16f>
				}
				return  OnylHoureOnTwoDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
     a58:	61 ec       	ldi	r22, 0xC1	; 193
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <__stack+0x16f>
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
     a5e:	6e 85       	ldd	r22, Y+14	; 0x0e
     a60:	7f 85       	ldd	r23, Y+15	; 0x0f
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <__stack+0x16f>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
     a64:	6c 85       	ldd	r22, Y+12	; 0x0c
     a66:	7d 85       	ldd	r23, Y+13	; 0x0d
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
     a6a:	6a 85       	ldd	r22, Y+10	; 0x0a
     a6c:	7b 85       	ldd	r23, Y+11	; 0x0b
	if(fSecondTimerFlag())
	{
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
     a6e:	8f e2       	ldi	r24, 0x2F	; 47
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     a76:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
	if(exactOneDot == 2){
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	19 f0       	breq	.+6      	; 0xa86 <__stack+0x187>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
     a80:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exactOneDot>
     a84:	0c c0       	rjmp	.+24     	; 0xa9e <__stack+0x19f>
	if(exactOneDot == 2){
		exactOneDot = 0;
     a86:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exactOneDot>
		exactMinute ++;
     a8a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
		if(exactMinute == 5){
     a90:	85 30       	cpi	r24, 0x05	; 5
     a92:	19 f0       	breq	.+6      	; 0xa9a <__stack+0x19b>
*/
inline void actualizePosition(){
	exactOneDot ++;
	if(exactOneDot == 2){
		exactOneDot = 0;
		exactMinute ++;
     a94:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <exactMinute>
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__stack+0x19f>
		if(exactMinute == 5){
			exactMinute = 0;
     a9a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exactMinute>
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
	actualizePosition();
	(position>=120-1) ? position=0 : position++;
     a9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
     aa2:	87 37       	cpi	r24, 0x77	; 119
     aa4:	18 f0       	brcs	.+6      	; 0xaac <__stack+0x1ad>
     aa6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__stack+0x1b3>
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
				cli();
				__asm__ __volatile__ ("nop");
				__asm__ __volatile__ ("nop");
				secondTimerFlag=0;
				calculateLineAndRabin();
				lineCounter++;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	ab 81       	ldd	r26, Y+3	; 0x03
     ab8:	bc 81       	ldd	r27, Y+4	; 0x04
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	a1 1d       	adc	r26, r1
     abe:	b1 1d       	adc	r27, r1
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	ab 83       	std	Y+3, r26	; 0x03
     ac6:	bc 83       	std	Y+4, r27	; 0x04
				sei();
     ac8:	78 94       	sei
	calculateLineAndRabin();
	for(uint8_t i=0;i<10;i++)
	{
		while(true)
		{
			if(lineCounter == long(2*i) + long(i*15*120))
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	ab 81       	ldd	r26, Y+3	; 0x03
     ad0:	bc 81       	ldd	r27, Y+4	; 0x04
     ad2:	88 15       	cp	r24, r8
     ad4:	99 05       	cpc	r25, r9
     ad6:	aa 05       	cpc	r26, r10
     ad8:	bb 05       	cpc	r27, r11
     ada:	09 f0       	breq	.+2      	; 0xade <__stack+0x1df>
     adc:	c2 ce       	rjmp	.-636    	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
     ade:	56 cd       	rjmp	.-1364   	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
	hour_pos=hour*10; 
     ae0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     ae4:	88 0f       	add	r24, r24
     ae6:	98 2f       	mov	r25, r24
     ae8:	99 0f       	add	r25, r25
     aea:	99 0f       	add	r25, r25
     aec:	89 0f       	add	r24, r25
     aee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour_pos>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	55 cc       	rjmp	.-1878   	; 0x3a0 <_Z13testArtifactsv+0xc0>
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
     af6:	81 2c       	mov	r8, r1
     af8:	91 2c       	mov	r9, r1
     afa:	54 01       	movw	r10, r8
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
     afc:	81 ee       	ldi	r24, 0xE1	; 225
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	8a 87       	std	Y+10, r24	; 0x0a
     b02:	9b 87       	std	Y+11, r25	; 0x0b
		}
		return NoNiddleOneDot;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	68 2e       	mov	r6, r24
     b0a:	79 2e       	mov	r7, r25
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
     b0c:	85 e7       	ldi	r24, 0x75	; 117
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	8c 87       	std	Y+12, r24	; 0x0c
     b12:	9d 87       	std	Y+13, r25	; 0x0d
			}
			return OnylMinuteOnOneDot;
     b14:	8d e4       	ldi	r24, 0x4D	; 77
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	8e 83       	std	Y+6, r24	; 0x06
     b1a:	9f 83       	std	Y+7, r25	; 0x07
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
     b1c:	85 e9       	ldi	r24, 0x95	; 149
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	8e 87       	std	Y+14, r24	; 0x0e
     b22:	9f 87       	std	Y+15, r25	; 0x0f
				}
				return NoNiddleTwoDots;
     b24:	8d ed       	ldi	r24, 0xDD	; 221
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	88 87       	std	Y+8, r24	; 0x08
     b2a:	99 87       	std	Y+9, r25	; 0x09
     b2c:	36 2c       	mov	r3, r6
     b2e:	27 2c       	mov	r2, r7
     b30:	23 cd       	rjmp	.-1466   	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
	hour_pos=hour*10; 
     b32:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     b36:	88 0f       	add	r24, r24
     b38:	98 2f       	mov	r25, r24
     b3a:	99 0f       	add	r25, r25
     b3c:	99 0f       	add	r25, r25
     b3e:	89 0f       	add	r24, r25
     b40:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour_pos>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	6e cd       	rjmp	.-1316   	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
	hour_pos=hour*10; 
     b48:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
     b4c:	88 0f       	add	r24, r24
     b4e:	98 2f       	mov	r25, r24
     b50:	99 0f       	add	r25, r25
     b52:	99 0f       	add	r25, r25
     b54:	89 0f       	add	r24, r25
     b56:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour_pos>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	c4 ce       	rjmp	.-632    	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
				sei();
			
			}
		}
	}
}
     b5e:	2f 96       	adiw	r28, 0x0f	; 15
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	7f 90       	pop	r7
     b84:	6f 90       	pop	r6
     b86:	5f 90       	pop	r5
     b88:	4f 90       	pop	r4
     b8a:	3f 90       	pop	r3
     b8c:	2f 90       	pop	r2
     b8e:	08 95       	ret

00000b90 <_Z11createLinesv>:




/* Generating frames to Display */
void createLines(){
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	1f 92       	push	r1
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	e1 e0       	ldi	r30, 0x01	; 1
     b9c:	f4 e0       	ldi	r31, 0x04	; 4
     b9e:	82 e2       	ldi	r24, 0x22	; 34
     ba0:	94 e0       	ldi	r25, 0x04	; 4
	/* Without any niddle */
	/* One dot */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 1;i++){
		NoNiddleOneDot[3*i+0] = BACKGROUND_RED;
     ba2:	10 82       	st	Z, r1
		NoNiddleOneDot[3*i+1] = BACKGROUND_GREEN;
     ba4:	11 82       	std	Z+1, r1	; 0x01
		NoNiddleOneDot[3*i+2] = BACKGROUND_BLUE;
     ba6:	12 82       	std	Z+2, r1	; 0x02
     ba8:	33 96       	adiw	r30, 0x03	; 3

/* Generating frames to Display */
void createLines(){
	/* Without any niddle */
	/* One dot */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 1;i++){
     baa:	8e 17       	cp	r24, r30
     bac:	9f 07       	cpc	r25, r31
     bae:	c9 f7       	brne	.-14     	; 0xba2 <_Z11createLinesv+0x12>
     bb0:	64 c2       	rjmp	.+1224   	; 0x107a <_Z11createLinesv+0x4ea>
		NoNiddleOneDot[3*i+1] = DOT_GREEN;
		NoNiddleOneDot[3*i+2] = DOT_BLUE;
	}
	/* Two dots */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 2;i++){
		NoNiddleTwoDots[3*i+0] = BACKGROUND_RED;
     bb2:	10 82       	st	Z, r1
		NoNiddleTwoDots[3*i+1] = BACKGROUND_GREEN;
     bb4:	11 82       	std	Z+1, r1	; 0x01
		NoNiddleTwoDots[3*i+2] = BACKGROUND_BLUE;
     bb6:	12 82       	std	Z+2, r1	; 0x02
     bb8:	33 96       	adiw	r30, 0x03	; 3
		NoNiddleOneDot[3*i+0] = DOT_RED;
		NoNiddleOneDot[3*i+1] = DOT_GREEN;
		NoNiddleOneDot[3*i+2] = DOT_BLUE;
	}
	/* Two dots */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 2;i++){
     bba:	8e 17       	cp	r24, r30
     bbc:	9f 07       	cpc	r25, r31
     bbe:	c9 f7       	brne	.-14     	; 0xbb2 <_Z11createLinesv+0x22>
		NoNiddleTwoDots[3*i+0] = BACKGROUND_RED;
		NoNiddleTwoDots[3*i+1] = BACKGROUND_GREEN;
		NoNiddleTwoDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 2;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleTwoDots[3*i+0] = DOT_RED;
     bc0:	ed ed       	ldi	r30, 0xDD	; 221
     bc2:	f3 e0       	ldi	r31, 0x03	; 3
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	86 8f       	std	Z+30, r24	; 0x1e
		NoNiddleTwoDots[3*i+1] = DOT_GREEN;
     bc8:	87 8f       	std	Z+31, r24	; 0x1f
		NoNiddleTwoDots[3*i+2] = DOT_BLUE;
     bca:	80 a3       	std	Z+32, r24	; 0x20
		NoNiddleTwoDots[3*i+0] = BACKGROUND_RED;
		NoNiddleTwoDots[3*i+1] = BACKGROUND_GREEN;
		NoNiddleTwoDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 2;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleTwoDots[3*i+0] = DOT_RED;
     bcc:	81 a3       	std	Z+33, r24	; 0x21
		NoNiddleTwoDots[3*i+1] = DOT_GREEN;
     bce:	82 a3       	std	Z+34, r24	; 0x22
		NoNiddleTwoDots[3*i+2] = DOT_BLUE;
     bd0:	83 a3       	std	Z+35, r24	; 0x23
     bd2:	e9 eb       	ldi	r30, 0xB9	; 185
     bd4:	f3 e0       	ldi	r31, 0x03	; 3
     bd6:	84 ed       	ldi	r24, 0xD4	; 212
     bd8:	93 e0       	ldi	r25, 0x03	; 3
	}
	/* Three dots */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 3;i++){
		NoNiddleThreeDots[3*i+0] = BACKGROUND_RED;
     bda:	10 82       	st	Z, r1
		NoNiddleThreeDots[3*i+1] = BACKGROUND_GREEN;
     bdc:	11 82       	std	Z+1, r1	; 0x01
		NoNiddleThreeDots[3*i+2] = BACKGROUND_BLUE;
     bde:	12 82       	std	Z+2, r1	; 0x02
     be0:	33 96       	adiw	r30, 0x03	; 3
		NoNiddleTwoDots[3*i+0] = DOT_RED;
		NoNiddleTwoDots[3*i+1] = DOT_GREEN;
		NoNiddleTwoDots[3*i+2] = DOT_BLUE;
	}
	/* Three dots */
	for(uint8_t i=0;i<NUMBER_OF_DIAG_LEDS - 3;i++){
     be2:	e8 17       	cp	r30, r24
     be4:	f9 07       	cpc	r31, r25
     be6:	c9 f7       	brne	.-14     	; 0xbda <_Z11createLinesv+0x4a>
		NoNiddleThreeDots[3*i+0] = BACKGROUND_RED;
		NoNiddleThreeDots[3*i+1] = BACKGROUND_GREEN;
		NoNiddleThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 3;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleThreeDots[3*i+0] = DOT_RED;
     be8:	e9 eb       	ldi	r30, 0xB9	; 185
     bea:	f3 e0       	ldi	r31, 0x03	; 3
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	83 8f       	std	Z+27, r24	; 0x1b
		NoNiddleThreeDots[3*i+1] = DOT_GREEN;
     bf0:	84 8f       	std	Z+28, r24	; 0x1c
		NoNiddleThreeDots[3*i+2] = DOT_BLUE;
     bf2:	85 8f       	std	Z+29, r24	; 0x1d
		NoNiddleThreeDots[3*i+0] = BACKGROUND_RED;
		NoNiddleThreeDots[3*i+1] = BACKGROUND_GREEN;
		NoNiddleThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 3;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleThreeDots[3*i+0] = DOT_RED;
     bf4:	86 8f       	std	Z+30, r24	; 0x1e
		NoNiddleThreeDots[3*i+1] = DOT_GREEN;
     bf6:	87 8f       	std	Z+31, r24	; 0x1f
		NoNiddleThreeDots[3*i+2] = DOT_BLUE;
     bf8:	80 a3       	std	Z+32, r24	; 0x20
		NoNiddleThreeDots[3*i+0] = BACKGROUND_RED;
		NoNiddleThreeDots[3*i+1] = BACKGROUND_GREEN;
		NoNiddleThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 3;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleThreeDots[3*i+0] = DOT_RED;
     bfa:	81 a3       	std	Z+33, r24	; 0x21
		NoNiddleThreeDots[3*i+1] = DOT_GREEN;
     bfc:	82 a3       	std	Z+34, r24	; 0x22
		NoNiddleThreeDots[3*i+2] = DOT_BLUE;
     bfe:	83 a3       	std	Z+35, r24	; 0x23
	}
	
	/* Only second frames */
	/* TwoDots */
	for(volatile uint8_t i=0;i<SECOND_SIZE;i++){
     c00:	19 82       	std	Y+1, r1	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	89 30       	cpi	r24, 0x09	; 9
     c06:	40 f5       	brcc	.+80     	; 0xc58 <_Z11createLinesv+0xc8>
		OnylSecondsOnTwoDots[3*i+0] = SECOND_RED;
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	8e 0f       	add	r24, r30
     c16:	9f 1f       	adc	r25, r31
     c18:	fc 01       	movw	r30, r24
     c1a:	eb 56       	subi	r30, 0x6B	; 107
     c1c:	fc 4f       	sbci	r31, 0xFC	; 252
     c1e:	20 83       	st	Z, r18
		OnylSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	fc 01       	movw	r30, r24
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	8e 0f       	add	r24, r30
     c2c:	9f 1f       	adc	r25, r31
     c2e:	fc 01       	movw	r30, r24
     c30:	eb 56       	subi	r30, 0x6B	; 107
     c32:	fc 4f       	sbci	r31, 0xFC	; 252
     c34:	11 82       	std	Z+1, r1	; 0x01
		OnylSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	8e 0f       	add	r24, r30
     c42:	9f 1f       	adc	r25, r31
     c44:	fc 01       	movw	r30, r24
     c46:	eb 56       	subi	r30, 0x6B	; 107
     c48:	fc 4f       	sbci	r31, 0xFC	; 252
     c4a:	12 82       	std	Z+2, r1	; 0x02
		NoNiddleThreeDots[3*i+2] = DOT_BLUE;
	}
	
	/* Only second frames */
	/* TwoDots */
	for(volatile uint8_t i=0;i<SECOND_SIZE;i++){
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	89 30       	cpi	r24, 0x09	; 9
     c56:	c8 f2       	brcs	.-78     	; 0xc0a <_Z11createLinesv+0x7a>
		OnylSecondsOnTwoDots[3*i+0] = SECOND_RED;
		OnylSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
		OnylSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
	}
	OnylSecondsOnTwoDots[3*SECOND_SIZE] = BACKGROUND_RED;
     c58:	e5 e9       	ldi	r30, 0x95	; 149
     c5a:	f3 e0       	ldi	r31, 0x03	; 3
     c5c:	13 8e       	std	Z+27, r1	; 0x1b
	OnylSecondsOnTwoDots[3*SECOND_SIZE+1] = BACKGROUND_GREEN;
     c5e:	14 8e       	std	Z+28, r1	; 0x1c
	OnylSecondsOnTwoDots[3*SECOND_SIZE+2] = BACKGROUND_BLUE;
     c60:	15 8e       	std	Z+29, r1	; 0x1d
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylSecondsOnTwoDots[3*i+0] = DOT_RED;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	86 8f       	std	Z+30, r24	; 0x1e
		OnylSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     c66:	87 8f       	std	Z+31, r24	; 0x1f
		OnylSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     c68:	80 a3       	std	Z+32, r24	; 0x20
	}
	OnylSecondsOnTwoDots[3*SECOND_SIZE] = BACKGROUND_RED;
	OnylSecondsOnTwoDots[3*SECOND_SIZE+1] = BACKGROUND_GREEN;
	OnylSecondsOnTwoDots[3*SECOND_SIZE+2] = BACKGROUND_BLUE;
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylSecondsOnTwoDots[3*i+0] = DOT_RED;
     c6a:	81 a3       	std	Z+33, r24	; 0x21
		OnylSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     c6c:	82 a3       	std	Z+34, r24	; 0x22
		OnylSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     c6e:	83 a3       	std	Z+35, r24	; 0x23
     c70:	e1 e7       	ldi	r30, 0x71	; 113
     c72:	f3 e0       	ldi	r31, 0x03	; 3
     c74:	2c e8       	ldi	r18, 0x8C	; 140
     c76:	33 e0       	ldi	r19, 0x03	; 3
	}
	
	/* ThreeDots */
	for(uint8_t i=0;i<SECOND_SIZE;i++){
		OnylSecondsOnThreeDots[3*i+0] = SECOND_RED;
     c78:	80 83       	st	Z, r24
		OnylSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     c7a:	11 82       	std	Z+1, r1	; 0x01
		OnylSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     c7c:	12 82       	std	Z+2, r1	; 0x02
     c7e:	33 96       	adiw	r30, 0x03	; 3
		OnylSecondsOnTwoDots[3*i+1] = DOT_GREEN;
		OnylSecondsOnTwoDots[3*i+2] = DOT_BLUE;
	}
	
	/* ThreeDots */
	for(uint8_t i=0;i<SECOND_SIZE;i++){
     c80:	2e 17       	cp	r18, r30
     c82:	3f 07       	cpc	r19, r31
     c84:	c9 f7       	brne	.-14     	; 0xc78 <_Z11createLinesv+0xe8>
		OnylSecondsOnThreeDots[3*i+0] = SECOND_RED;
		OnylSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
		OnylSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
	}
	for(uint8_t i=SECOND_SIZE;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylSecondsOnThreeDots[3*i+0] = DOT_RED;
     c86:	e1 e7       	ldi	r30, 0x71	; 113
     c88:	f3 e0       	ldi	r31, 0x03	; 3
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	83 8f       	std	Z+27, r24	; 0x1b
		OnylSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     c8e:	84 8f       	std	Z+28, r24	; 0x1c
		OnylSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     c90:	85 8f       	std	Z+29, r24	; 0x1d
		OnylSecondsOnThreeDots[3*i+0] = SECOND_RED;
		OnylSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
		OnylSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
	}
	for(uint8_t i=SECOND_SIZE;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylSecondsOnThreeDots[3*i+0] = DOT_RED;
     c92:	86 8f       	std	Z+30, r24	; 0x1e
		OnylSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     c94:	87 8f       	std	Z+31, r24	; 0x1f
		OnylSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     c96:	80 a3       	std	Z+32, r24	; 0x20
		OnylSecondsOnThreeDots[3*i+0] = SECOND_RED;
		OnylSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
		OnylSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
	}
	for(uint8_t i=SECOND_SIZE;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylSecondsOnThreeDots[3*i+0] = DOT_RED;
     c98:	81 a3       	std	Z+33, r24	; 0x21
		OnylSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     c9a:	82 a3       	std	Z+34, r24	; 0x22
		OnylSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     c9c:	83 a3       	std	Z+35, r24	; 0x23
     c9e:	ed e4       	ldi	r30, 0x4D	; 77
     ca0:	f3 e0       	ldi	r31, 0x03	; 3
     ca2:	22 e6       	ldi	r18, 0x62	; 98
     ca4:	33 e0       	ldi	r19, 0x03	; 3
	}
	
	/* Only minute frames */
	/*On  one dot*/
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
		OnylMinuteOnOneDot[3*i+0] = MINUTE_RED;
     ca6:	10 82       	st	Z, r1
		OnylMinuteOnOneDot[3*i+1] = MINUTE_GREEN;
     ca8:	81 83       	std	Z+1, r24	; 0x01
		OnylMinuteOnOneDot[3*i+2] = MINUTE_BLUE;
     caa:	12 82       	std	Z+2, r1	; 0x02
     cac:	33 96       	adiw	r30, 0x03	; 3
		OnylSecondsOnThreeDots[3*i+2] = DOT_BLUE;
	}
	
	/* Only minute frames */
	/*On  one dot*/
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
     cae:	2e 17       	cp	r18, r30
     cb0:	3f 07       	cpc	r19, r31
     cb2:	c9 f7       	brne	.-14     	; 0xca6 <_Z11createLinesv+0x116>
		OnylMinuteOnOneDot[3*i+0] = MINUTE_RED;
		OnylMinuteOnOneDot[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		OnylMinuteOnOneDot[3*i+0] = BACKGROUND_RED;
     cb4:	ed e4       	ldi	r30, 0x4D	; 77
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	15 8a       	std	Z+21, r1	; 0x15
		OnylMinuteOnOneDot[3*i+1] = BACKGROUND_GREEN;
     cba:	16 8a       	std	Z+22, r1	; 0x16
		OnylMinuteOnOneDot[3*i+2] = BACKGROUND_BLUE;
     cbc:	17 8a       	std	Z+23, r1	; 0x17
		OnylMinuteOnOneDot[3*i+0] = MINUTE_RED;
		OnylMinuteOnOneDot[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		OnylMinuteOnOneDot[3*i+0] = BACKGROUND_RED;
     cbe:	10 8e       	std	Z+24, r1	; 0x18
		OnylMinuteOnOneDot[3*i+1] = BACKGROUND_GREEN;
     cc0:	11 8e       	std	Z+25, r1	; 0x19
		OnylMinuteOnOneDot[3*i+2] = BACKGROUND_BLUE;
     cc2:	12 8e       	std	Z+26, r1	; 0x1a
		OnylMinuteOnOneDot[3*i+0] = MINUTE_RED;
		OnylMinuteOnOneDot[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		OnylMinuteOnOneDot[3*i+0] = BACKGROUND_RED;
     cc4:	13 8e       	std	Z+27, r1	; 0x1b
		OnylMinuteOnOneDot[3*i+1] = BACKGROUND_GREEN;
     cc6:	14 8e       	std	Z+28, r1	; 0x1c
		OnylMinuteOnOneDot[3*i+2] = BACKGROUND_BLUE;
     cc8:	15 8e       	std	Z+29, r1	; 0x1d
		OnylMinuteOnOneDot[3*i+0] = MINUTE_RED;
		OnylMinuteOnOneDot[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		OnylMinuteOnOneDot[3*i+0] = BACKGROUND_RED;
     cca:	16 8e       	std	Z+30, r1	; 0x1e
		OnylMinuteOnOneDot[3*i+1] = BACKGROUND_GREEN;
     ccc:	17 8e       	std	Z+31, r1	; 0x1f
		OnylMinuteOnOneDot[3*i+2] = BACKGROUND_BLUE;
     cce:	10 a2       	std	Z+32, r1	; 0x20
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-1;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnOneDot[3*i+0] = DOT_RED;
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	81 a3       	std	Z+33, r24	; 0x21
		OnylMinuteOnOneDot[3*i+1] = DOT_GREEN;
     cd4:	82 a3       	std	Z+34, r24	; 0x22
		OnylMinuteOnOneDot[3*i+2] = DOT_BLUE;
     cd6:	83 a3       	std	Z+35, r24	; 0x23
     cd8:	e9 e2       	ldi	r30, 0x29	; 41
     cda:	f3 e0       	ldi	r31, 0x03	; 3
     cdc:	2e e3       	ldi	r18, 0x3E	; 62
     cde:	33 e0       	ldi	r19, 0x03	; 3
	}
	/*On two dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
		OnylMinuteOnTwoDots[3*i+0] = MINUTE_RED;
     ce0:	10 82       	st	Z, r1
		OnylMinuteOnTwoDots[3*i+1] = MINUTE_GREEN;
     ce2:	81 83       	std	Z+1, r24	; 0x01
		OnylMinuteOnTwoDots[3*i+2] = MINUTE_BLUE;
     ce4:	12 82       	std	Z+2, r1	; 0x02
     ce6:	33 96       	adiw	r30, 0x03	; 3
		OnylMinuteOnOneDot[3*i+0] = DOT_RED;
		OnylMinuteOnOneDot[3*i+1] = DOT_GREEN;
		OnylMinuteOnOneDot[3*i+2] = DOT_BLUE;
	}
	/*On two dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
     ce8:	e2 17       	cp	r30, r18
     cea:	f3 07       	cpc	r31, r19
     cec:	c9 f7       	brne	.-14     	; 0xce0 <_Z11createLinesv+0x150>
		OnylMinuteOnTwoDots[3*i+0] = MINUTE_RED;
		OnylMinuteOnTwoDots[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnTwoDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		OnylMinuteOnTwoDots[3*i+0] = BACKGROUND_RED;
     cee:	e9 e2       	ldi	r30, 0x29	; 41
     cf0:	f3 e0       	ldi	r31, 0x03	; 3
     cf2:	15 8a       	std	Z+21, r1	; 0x15
		OnylMinuteOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     cf4:	16 8a       	std	Z+22, r1	; 0x16
		OnylMinuteOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     cf6:	17 8a       	std	Z+23, r1	; 0x17
		OnylMinuteOnTwoDots[3*i+0] = MINUTE_RED;
		OnylMinuteOnTwoDots[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnTwoDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		OnylMinuteOnTwoDots[3*i+0] = BACKGROUND_RED;
     cf8:	10 8e       	std	Z+24, r1	; 0x18
		OnylMinuteOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     cfa:	11 8e       	std	Z+25, r1	; 0x19
		OnylMinuteOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     cfc:	12 8e       	std	Z+26, r1	; 0x1a
		OnylMinuteOnTwoDots[3*i+0] = MINUTE_RED;
		OnylMinuteOnTwoDots[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnTwoDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		OnylMinuteOnTwoDots[3*i+0] = BACKGROUND_RED;
     cfe:	13 8e       	std	Z+27, r1	; 0x1b
		OnylMinuteOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     d00:	14 8e       	std	Z+28, r1	; 0x1c
		OnylMinuteOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     d02:	15 8e       	std	Z+29, r1	; 0x1d
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnTwoDots[3*i+0] = DOT_RED;
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	86 8f       	std	Z+30, r24	; 0x1e
		OnylMinuteOnTwoDots[3*i+1] = DOT_GREEN;
     d08:	87 8f       	std	Z+31, r24	; 0x1f
		OnylMinuteOnTwoDots[3*i+2] = DOT_BLUE;
     d0a:	80 a3       	std	Z+32, r24	; 0x20
		OnylMinuteOnTwoDots[3*i+0] = BACKGROUND_RED;
		OnylMinuteOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		OnylMinuteOnTwoDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnTwoDots[3*i+0] = DOT_RED;
     d0c:	81 a3       	std	Z+33, r24	; 0x21
		OnylMinuteOnTwoDots[3*i+1] = DOT_GREEN;
     d0e:	82 a3       	std	Z+34, r24	; 0x22
		OnylMinuteOnTwoDots[3*i+2] = DOT_BLUE;
     d10:	83 a3       	std	Z+35, r24	; 0x23
     d12:	e5 e0       	ldi	r30, 0x05	; 5
     d14:	f3 e0       	ldi	r31, 0x03	; 3
     d16:	2a e1       	ldi	r18, 0x1A	; 26
     d18:	33 e0       	ldi	r19, 0x03	; 3
	}
	/*On three dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
		OnylMinuteOnThreeDots[3*i+0] = MINUTE_RED;
     d1a:	10 82       	st	Z, r1
		OnylMinuteOnThreeDots[3*i+1] = MINUTE_GREEN;
     d1c:	81 83       	std	Z+1, r24	; 0x01
		OnylMinuteOnThreeDots[3*i+2] = MINUTE_BLUE;
     d1e:	12 82       	std	Z+2, r1	; 0x02
     d20:	33 96       	adiw	r30, 0x03	; 3
		OnylMinuteOnTwoDots[3*i+0] = DOT_RED;
		OnylMinuteOnTwoDots[3*i+1] = DOT_GREEN;
		OnylMinuteOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
     d22:	2e 17       	cp	r18, r30
     d24:	3f 07       	cpc	r19, r31
     d26:	c9 f7       	brne	.-14     	; 0xd1a <_Z11createLinesv+0x18a>
		OnylMinuteOnThreeDots[3*i+0] = MINUTE_RED;
		OnylMinuteOnThreeDots[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnThreeDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylMinuteOnThreeDots[3*i+0] = BACKGROUND_RED;
     d28:	e5 e0       	ldi	r30, 0x05	; 5
     d2a:	f3 e0       	ldi	r31, 0x03	; 3
     d2c:	15 8a       	std	Z+21, r1	; 0x15
		OnylMinuteOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     d2e:	16 8a       	std	Z+22, r1	; 0x16
		OnylMinuteOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     d30:	17 8a       	std	Z+23, r1	; 0x17
		OnylMinuteOnThreeDots[3*i+0] = MINUTE_RED;
		OnylMinuteOnThreeDots[3*i+1] = MINUTE_GREEN;
		OnylMinuteOnThreeDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylMinuteOnThreeDots[3*i+0] = BACKGROUND_RED;
     d32:	10 8e       	std	Z+24, r1	; 0x18
		OnylMinuteOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     d34:	11 8e       	std	Z+25, r1	; 0x19
		OnylMinuteOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     d36:	12 8e       	std	Z+26, r1	; 0x1a
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnThreeDots[3*i+0] = DOT_RED;
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	83 8f       	std	Z+27, r24	; 0x1b
		OnylMinuteOnThreeDots[3*i+1] = DOT_GREEN;
     d3c:	84 8f       	std	Z+28, r24	; 0x1c
		OnylMinuteOnThreeDots[3*i+2] = DOT_BLUE;
     d3e:	85 8f       	std	Z+29, r24	; 0x1d
		OnylMinuteOnThreeDots[3*i+0] = BACKGROUND_RED;
		OnylMinuteOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		OnylMinuteOnThreeDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnThreeDots[3*i+0] = DOT_RED;
     d40:	86 8f       	std	Z+30, r24	; 0x1e
		OnylMinuteOnThreeDots[3*i+1] = DOT_GREEN;
     d42:	87 8f       	std	Z+31, r24	; 0x1f
		OnylMinuteOnThreeDots[3*i+2] = DOT_BLUE;
     d44:	80 a3       	std	Z+32, r24	; 0x20
		OnylMinuteOnThreeDots[3*i+0] = BACKGROUND_RED;
		OnylMinuteOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		OnylMinuteOnThreeDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylMinuteOnThreeDots[3*i+0] = DOT_RED;
     d46:	81 a3       	std	Z+33, r24	; 0x21
		OnylMinuteOnThreeDots[3*i+1] = DOT_GREEN;
     d48:	82 a3       	std	Z+34, r24	; 0x22
		OnylMinuteOnThreeDots[3*i+2] = DOT_BLUE;
     d4a:	83 a3       	std	Z+35, r24	; 0x23
     d4c:	e1 ee       	ldi	r30, 0xE1	; 225
     d4e:	f2 e0       	ldi	r31, 0x02	; 2
     d50:	20 ef       	ldi	r18, 0xF0	; 240
     d52:	32 e0       	ldi	r19, 0x02	; 2
     d54:	df 01       	movw	r26, r30
	}
	
	/* Only houres frames */
	/*On  one dot*/
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnOneDot[3*i+0] = HOUR_RED;
     d56:	1c 92       	st	X, r1
		OnylHoureOnOneDot[3*i+1] = HOUR_GREEN;
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	1c 92       	st	X, r1
     d5c:	11 97       	sbiw	r26, 0x01	; 1
		OnylHoureOnOneDot[3*i+2] = HOUR_BLUE;
     d5e:	12 96       	adiw	r26, 0x02	; 2
     d60:	8c 93       	st	X, r24
     d62:	12 97       	sbiw	r26, 0x02	; 2
     d64:	13 96       	adiw	r26, 0x03	; 3
		OnylMinuteOnThreeDots[3*i+2] = DOT_BLUE;
	}
	
	/* Only houres frames */
	/*On  one dot*/
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     d66:	a2 17       	cp	r26, r18
     d68:	b3 07       	cpc	r27, r19
     d6a:	a9 f7       	brne	.-22     	; 0xd56 <_Z11createLinesv+0x1c6>
     d6c:	83 ef       	ldi	r24, 0xF3	; 243
     d6e:	92 e0       	ldi	r25, 0x02	; 2
		OnylHoureOnOneDot[3*i+0] = HOUR_RED;
		OnylHoureOnOneDot[3*i+1] = HOUR_GREEN;
		OnylHoureOnOneDot[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		OnylHoureOnOneDot[3*i+0] = BACKGROUND_RED;
     d70:	17 86       	std	Z+15, r1	; 0x0f
		OnylHoureOnOneDot[3*i+1] = BACKGROUND_GREEN;
     d72:	10 8a       	std	Z+16, r1	; 0x10
		OnylHoureOnOneDot[3*i+2] = BACKGROUND_BLUE;
     d74:	11 8a       	std	Z+17, r1	; 0x11
     d76:	33 96       	adiw	r30, 0x03	; 3
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnOneDot[3*i+0] = HOUR_RED;
		OnylHoureOnOneDot[3*i+1] = HOUR_GREEN;
		OnylHoureOnOneDot[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
     d78:	8e 17       	cp	r24, r30
     d7a:	9f 07       	cpc	r25, r31
     d7c:	c9 f7       	brne	.-14     	; 0xd70 <_Z11createLinesv+0x1e0>
     d7e:	70 c1       	rjmp	.+736    	; 0x1060 <_Z11createLinesv+0x4d0>
		OnylHoureOnOneDot[3*i+1] = DOT_GREEN;
		OnylHoureOnOneDot[3*i+2] = DOT_BLUE;
	}
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnTwoDots[3*i+0] = HOUR_RED;
     d80:	10 82       	st	Z, r1
		OnylHoureOnTwoDots[3*i+1] = HOUR_GREEN;
     d82:	11 82       	std	Z+1, r1	; 0x01
		OnylHoureOnTwoDots[3*i+2] = HOUR_BLUE;
     d84:	22 83       	std	Z+2, r18	; 0x02
     d86:	33 96       	adiw	r30, 0x03	; 3
		OnylHoureOnOneDot[3*i+0] = DOT_RED;
		OnylHoureOnOneDot[3*i+1] = DOT_GREEN;
		OnylHoureOnOneDot[3*i+2] = DOT_BLUE;
	}
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     d88:	8e 17       	cp	r24, r30
     d8a:	9f 07       	cpc	r25, r31
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <_Z11createLinesv+0x1f0>
		OnylHoureOnTwoDots[3*i+0] = HOUR_RED;
		OnylHoureOnTwoDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnTwoDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		OnylHoureOnTwoDots[3*i+0] = BACKGROUND_RED;
     d8e:	1f 96       	adiw	r26, 0x0f	; 15
     d90:	1c 92       	st	X, r1
     d92:	1f 97       	sbiw	r26, 0x0f	; 15
		OnylHoureOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     d94:	50 96       	adiw	r26, 0x10	; 16
     d96:	1c 92       	st	X, r1
     d98:	50 97       	sbiw	r26, 0x10	; 16
		OnylHoureOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     d9a:	51 96       	adiw	r26, 0x11	; 17
     d9c:	1c 92       	st	X, r1
     d9e:	51 97       	sbiw	r26, 0x11	; 17
     da0:	13 96       	adiw	r26, 0x03	; 3
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnTwoDots[3*i+0] = HOUR_RED;
		OnylHoureOnTwoDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnTwoDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
     da2:	8a 17       	cp	r24, r26
     da4:	9b 07       	cpc	r25, r27
     da6:	99 f7       	brne	.-26     	; 0xd8e <_Z11createLinesv+0x1fe>
		OnylHoureOnTwoDots[3*i+0] = BACKGROUND_RED;
		OnylHoureOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		OnylHoureOnTwoDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnTwoDots[3*i+0] = DOT_RED;
     da8:	ed eb       	ldi	r30, 0xBD	; 189
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	86 8f       	std	Z+30, r24	; 0x1e
		OnylHoureOnTwoDots[3*i+1] = DOT_GREEN;
     db0:	87 8f       	std	Z+31, r24	; 0x1f
		OnylHoureOnTwoDots[3*i+2] = DOT_BLUE;
     db2:	80 a3       	std	Z+32, r24	; 0x20
		OnylHoureOnTwoDots[3*i+0] = BACKGROUND_RED;
		OnylHoureOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		OnylHoureOnTwoDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnTwoDots[3*i+0] = DOT_RED;
     db4:	81 a3       	std	Z+33, r24	; 0x21
		OnylHoureOnTwoDots[3*i+1] = DOT_GREEN;
     db6:	82 a3       	std	Z+34, r24	; 0x22
		OnylHoureOnTwoDots[3*i+2] = DOT_BLUE;
     db8:	83 a3       	std	Z+35, r24	; 0x23
     dba:	e9 e9       	ldi	r30, 0x99	; 153
     dbc:	f2 e0       	ldi	r31, 0x02	; 2
     dbe:	28 ea       	ldi	r18, 0xA8	; 168
     dc0:	32 e0       	ldi	r19, 0x02	; 2
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnThreeDots[3*i+0] = HOUR_RED;
     dc2:	10 82       	st	Z, r1
		OnylHoureOnThreeDots[3*i+1] = HOUR_GREEN;
     dc4:	11 82       	std	Z+1, r1	; 0x01
		OnylHoureOnThreeDots[3*i+2] = HOUR_BLUE;
     dc6:	82 83       	std	Z+2, r24	; 0x02
     dc8:	33 96       	adiw	r30, 0x03	; 3
		OnylHoureOnTwoDots[3*i+0] = DOT_RED;
		OnylHoureOnTwoDots[3*i+1] = DOT_GREEN;
		OnylHoureOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     dca:	e2 17       	cp	r30, r18
     dcc:	f3 07       	cpc	r31, r19
     dce:	c9 f7       	brne	.-14     	; 0xdc2 <_Z11createLinesv+0x232>
		OnylHoureOnThreeDots[3*i+0] = HOUR_RED;
		OnylHoureOnThreeDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnThreeDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
     dd0:	e9 e9       	ldi	r30, 0x99	; 153
     dd2:	f2 e0       	ldi	r31, 0x02	; 2
     dd4:	17 86       	std	Z+15, r1	; 0x0f
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     dd6:	10 8a       	std	Z+16, r1	; 0x10
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     dd8:	11 8a       	std	Z+17, r1	; 0x11
		OnylHoureOnThreeDots[3*i+0] = HOUR_RED;
		OnylHoureOnThreeDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnThreeDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
     dda:	12 8a       	std	Z+18, r1	; 0x12
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     ddc:	13 8a       	std	Z+19, r1	; 0x13
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     dde:	14 8a       	std	Z+20, r1	; 0x14
		OnylHoureOnThreeDots[3*i+0] = HOUR_RED;
		OnylHoureOnThreeDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnThreeDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
     de0:	15 8a       	std	Z+21, r1	; 0x15
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     de2:	16 8a       	std	Z+22, r1	; 0x16
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     de4:	17 8a       	std	Z+23, r1	; 0x17
		OnylHoureOnThreeDots[3*i+0] = HOUR_RED;
		OnylHoureOnThreeDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnThreeDots[3*i+2] = HOUR_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
     de6:	10 8e       	std	Z+24, r1	; 0x18
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     de8:	11 8e       	std	Z+25, r1	; 0x19
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     dea:	12 8e       	std	Z+26, r1	; 0x1a
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnThreeDots[3*i+0] = DOT_RED;
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	83 8f       	std	Z+27, r24	; 0x1b
		OnylHoureOnThreeDots[3*i+1] = DOT_GREEN;
     df0:	84 8f       	std	Z+28, r24	; 0x1c
		OnylHoureOnThreeDots[3*i+2] = DOT_BLUE;
     df2:	85 8f       	std	Z+29, r24	; 0x1d
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnThreeDots[3*i+0] = DOT_RED;
     df4:	86 8f       	std	Z+30, r24	; 0x1e
		OnylHoureOnThreeDots[3*i+1] = DOT_GREEN;
     df6:	87 8f       	std	Z+31, r24	; 0x1f
		OnylHoureOnThreeDots[3*i+2] = DOT_BLUE;
     df8:	80 a3       	std	Z+32, r24	; 0x20
		OnylHoureOnThreeDots[3*i+0] = BACKGROUND_RED;
		OnylHoureOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		OnylHoureOnThreeDots[3*i+2] = BACKGROUND_BLUE;
		}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnThreeDots[3*i+0] = DOT_RED;
     dfa:	81 a3       	std	Z+33, r24	; 0x21
		OnylHoureOnThreeDots[3*i+1] = DOT_GREEN;
     dfc:	82 a3       	std	Z+34, r24	; 0x22
		OnylHoureOnThreeDots[3*i+2] = DOT_BLUE;
     dfe:	83 a3       	std	Z+35, r24	; 0x23
     e00:	e5 e7       	ldi	r30, 0x75	; 117
     e02:	f2 e0       	ldi	r31, 0x02	; 2
     e04:	24 e8       	ldi	r18, 0x84	; 132
     e06:	32 e0       	ldi	r19, 0x02	; 2
	}
	
	/*Houre with minute */
	/*On  one dot*/
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HoureAndMinutesOnOneDot[3*i+0] = HOUR_RED + MINUTE_RED;
     e08:	10 82       	st	Z, r1
		HoureAndMinutesOnOneDot[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
     e0a:	81 83       	std	Z+1, r24	; 0x01
		HoureAndMinutesOnOneDot[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
     e0c:	82 83       	std	Z+2, r24	; 0x02
     e0e:	33 96       	adiw	r30, 0x03	; 3
		OnylHoureOnThreeDots[3*i+2] = DOT_BLUE;
	}
	
	/*Houre with minute */
	/*On  one dot*/
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     e10:	2e 17       	cp	r18, r30
     e12:	3f 07       	cpc	r19, r31
     e14:	c9 f7       	brne	.-14     	; 0xe08 <_Z11createLinesv+0x278>
		HoureAndMinutesOnOneDot[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnOneDot[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnOneDot[3*i+0] = MINUTE_RED;
     e16:	e5 e7       	ldi	r30, 0x75	; 117
     e18:	f2 e0       	ldi	r31, 0x02	; 2
     e1a:	17 86       	std	Z+15, r1	; 0x0f
		HoureAndMinutesOnOneDot[3*i+1] = MINUTE_GREEN;
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	80 8b       	std	Z+16, r24	; 0x10
		HoureAndMinutesOnOneDot[3*i+2] = MINUTE_BLUE;
     e20:	11 8a       	std	Z+17, r1	; 0x11
		HoureAndMinutesOnOneDot[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnOneDot[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnOneDot[3*i+0] = MINUTE_RED;
     e22:	12 8a       	std	Z+18, r1	; 0x12
		HoureAndMinutesOnOneDot[3*i+1] = MINUTE_GREEN;
     e24:	83 8b       	std	Z+19, r24	; 0x13
		HoureAndMinutesOnOneDot[3*i+2] = MINUTE_BLUE;
     e26:	14 8a       	std	Z+20, r1	; 0x14
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		HoureAndMinutesOnOneDot[3*i+0] = BACKGROUND_RED;
     e28:	15 8a       	std	Z+21, r1	; 0x15
		HoureAndMinutesOnOneDot[3*i+1] = BACKGROUND_GREEN;
     e2a:	16 8a       	std	Z+22, r1	; 0x16
		HoureAndMinutesOnOneDot[3*i+2] = BACKGROUND_BLUE;
     e2c:	17 8a       	std	Z+23, r1	; 0x17
		HoureAndMinutesOnOneDot[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnOneDot[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		HoureAndMinutesOnOneDot[3*i+0] = BACKGROUND_RED;
     e2e:	10 8e       	std	Z+24, r1	; 0x18
		HoureAndMinutesOnOneDot[3*i+1] = BACKGROUND_GREEN;
     e30:	11 8e       	std	Z+25, r1	; 0x19
		HoureAndMinutesOnOneDot[3*i+2] = BACKGROUND_BLUE;
     e32:	12 8e       	std	Z+26, r1	; 0x1a
		HoureAndMinutesOnOneDot[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnOneDot[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		HoureAndMinutesOnOneDot[3*i+0] = BACKGROUND_RED;
     e34:	13 8e       	std	Z+27, r1	; 0x1b
		HoureAndMinutesOnOneDot[3*i+1] = BACKGROUND_GREEN;
     e36:	14 8e       	std	Z+28, r1	; 0x1c
		HoureAndMinutesOnOneDot[3*i+2] = BACKGROUND_BLUE;
     e38:	15 8e       	std	Z+29, r1	; 0x1d
		HoureAndMinutesOnOneDot[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnOneDot[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-1;i++){
		HoureAndMinutesOnOneDot[3*i+0] = BACKGROUND_RED;
     e3a:	16 8e       	std	Z+30, r1	; 0x1e
		HoureAndMinutesOnOneDot[3*i+1] = BACKGROUND_GREEN;
     e3c:	17 8e       	std	Z+31, r1	; 0x1f
		HoureAndMinutesOnOneDot[3*i+2] = BACKGROUND_BLUE;
     e3e:	10 a2       	std	Z+32, r1	; 0x20
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-1;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnOneDot[3*i+0] = DOT_RED;
     e40:	81 a3       	std	Z+33, r24	; 0x21
		HoureAndMinutesOnOneDot[3*i+1] = DOT_GREEN;
     e42:	82 a3       	std	Z+34, r24	; 0x22
		HoureAndMinutesOnOneDot[3*i+2] = DOT_BLUE;
     e44:	83 a3       	std	Z+35, r24	; 0x23
     e46:	e1 e5       	ldi	r30, 0x51	; 81
     e48:	f2 e0       	ldi	r31, 0x02	; 2
     e4a:	20 e6       	ldi	r18, 0x60	; 96
     e4c:	32 e0       	ldi	r19, 0x02	; 2
	}
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED;
     e4e:	10 82       	st	Z, r1
		HoureAndMinutesOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
     e50:	81 83       	std	Z+1, r24	; 0x01
		HoureAndMinutesOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
     e52:	82 83       	std	Z+2, r24	; 0x02
     e54:	33 96       	adiw	r30, 0x03	; 3
		HoureAndMinutesOnOneDot[3*i+0] = DOT_RED;
		HoureAndMinutesOnOneDot[3*i+1] = DOT_GREEN;
		HoureAndMinutesOnOneDot[3*i+2] = DOT_BLUE;
	}
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     e56:	e2 17       	cp	r30, r18
     e58:	f3 07       	cpc	r31, r19
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <_Z11createLinesv+0x2be>
		HoureAndMinutesOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = MINUTE_RED;
     e5c:	e1 e5       	ldi	r30, 0x51	; 81
     e5e:	f2 e0       	ldi	r31, 0x02	; 2
     e60:	17 86       	std	Z+15, r1	; 0x0f
		HoureAndMinutesOnTwoDots[3*i+1] = MINUTE_GREEN;
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	80 8b       	std	Z+16, r24	; 0x10
		HoureAndMinutesOnTwoDots[3*i+2] = MINUTE_BLUE;
     e66:	11 8a       	std	Z+17, r1	; 0x11
		HoureAndMinutesOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = MINUTE_RED;
     e68:	12 8a       	std	Z+18, r1	; 0x12
		HoureAndMinutesOnTwoDots[3*i+1] = MINUTE_GREEN;
     e6a:	83 8b       	std	Z+19, r24	; 0x13
		HoureAndMinutesOnTwoDots[3*i+2] = MINUTE_BLUE;
     e6c:	14 8a       	std	Z+20, r1	; 0x14
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = BACKGROUND_RED;
     e6e:	15 8a       	std	Z+21, r1	; 0x15
		HoureAndMinutesOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     e70:	16 8a       	std	Z+22, r1	; 0x16
		HoureAndMinutesOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     e72:	17 8a       	std	Z+23, r1	; 0x17
		HoureAndMinutesOnTwoDots[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = BACKGROUND_RED;
     e74:	10 8e       	std	Z+24, r1	; 0x18
		HoureAndMinutesOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     e76:	11 8e       	std	Z+25, r1	; 0x19
		HoureAndMinutesOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     e78:	12 8e       	std	Z+26, r1	; 0x1a
		HoureAndMinutesOnTwoDots[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = BACKGROUND_RED;
     e7a:	13 8e       	std	Z+27, r1	; 0x1b
		HoureAndMinutesOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     e7c:	14 8e       	std	Z+28, r1	; 0x1c
		HoureAndMinutesOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     e7e:	15 8e       	std	Z+29, r1	; 0x1d
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = DOT_RED;
     e80:	86 8f       	std	Z+30, r24	; 0x1e
		HoureAndMinutesOnTwoDots[3*i+1] = DOT_GREEN;
     e82:	87 8f       	std	Z+31, r24	; 0x1f
		HoureAndMinutesOnTwoDots[3*i+2] = DOT_BLUE;
     e84:	80 a3       	std	Z+32, r24	; 0x20
		HoureAndMinutesOnTwoDots[3*i+0] = BACKGROUND_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnTwoDots[3*i+0] = DOT_RED;
     e86:	81 a3       	std	Z+33, r24	; 0x21
		HoureAndMinutesOnTwoDots[3*i+1] = DOT_GREEN;
     e88:	82 a3       	std	Z+34, r24	; 0x22
		HoureAndMinutesOnTwoDots[3*i+2] = DOT_BLUE;
     e8a:	83 a3       	std	Z+35, r24	; 0x23
     e8c:	ed e2       	ldi	r30, 0x2D	; 45
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	2c e3       	ldi	r18, 0x3C	; 60
     e92:	32 e0       	ldi	r19, 0x02	; 2
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED;
     e94:	10 82       	st	Z, r1
		HoureAndMinutesOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
     e96:	81 83       	std	Z+1, r24	; 0x01
		HoureAndMinutesOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
     e98:	82 83       	std	Z+2, r24	; 0x02
     e9a:	33 96       	adiw	r30, 0x03	; 3
		HoureAndMinutesOnTwoDots[3*i+0] = DOT_RED;
		HoureAndMinutesOnTwoDots[3*i+1] = DOT_GREEN;
		HoureAndMinutesOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     e9c:	2e 17       	cp	r18, r30
     e9e:	3f 07       	cpc	r19, r31
     ea0:	c9 f7       	brne	.-14     	; 0xe94 <_Z11createLinesv+0x304>
		HoureAndMinutesOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = MINUTE_RED;
     ea2:	ed e2       	ldi	r30, 0x2D	; 45
     ea4:	f2 e0       	ldi	r31, 0x02	; 2
     ea6:	17 86       	std	Z+15, r1	; 0x0f
		HoureAndMinutesOnThreeDots[3*i+1] = MINUTE_GREEN;
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	80 8b       	std	Z+16, r24	; 0x10
		HoureAndMinutesOnThreeDots[3*i+2] = MINUTE_BLUE;
     eac:	11 8a       	std	Z+17, r1	; 0x11
		HoureAndMinutesOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED;
		HoureAndMinutesOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN;
		HoureAndMinutesOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = MINUTE_RED;
     eae:	12 8a       	std	Z+18, r1	; 0x12
		HoureAndMinutesOnThreeDots[3*i+1] = MINUTE_GREEN;
     eb0:	83 8b       	std	Z+19, r24	; 0x13
		HoureAndMinutesOnThreeDots[3*i+2] = MINUTE_BLUE;
     eb2:	14 8a       	std	Z+20, r1	; 0x14
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = BACKGROUND_RED;
     eb4:	15 8a       	std	Z+21, r1	; 0x15
		HoureAndMinutesOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     eb6:	16 8a       	std	Z+22, r1	; 0x16
		HoureAndMinutesOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     eb8:	17 8a       	std	Z+23, r1	; 0x17
		HoureAndMinutesOnThreeDots[3*i+0] = MINUTE_RED;
		HoureAndMinutesOnThreeDots[3*i+1] = MINUTE_GREEN;
		HoureAndMinutesOnThreeDots[3*i+2] = MINUTE_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<NUMBER_OF_DIAG_LEDS-3;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = BACKGROUND_RED;
     eba:	10 8e       	std	Z+24, r1	; 0x18
		HoureAndMinutesOnThreeDots[3*i+1] = BACKGROUND_GREEN;
     ebc:	11 8e       	std	Z+25, r1	; 0x19
		HoureAndMinutesOnThreeDots[3*i+2] = BACKGROUND_BLUE;
     ebe:	12 8e       	std	Z+26, r1	; 0x1a
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = DOT_RED;
     ec0:	83 8f       	std	Z+27, r24	; 0x1b
		HoureAndMinutesOnThreeDots[3*i+1] = DOT_GREEN;
     ec2:	84 8f       	std	Z+28, r24	; 0x1c
		HoureAndMinutesOnThreeDots[3*i+2] = DOT_BLUE;
     ec4:	85 8f       	std	Z+29, r24	; 0x1d
		HoureAndMinutesOnThreeDots[3*i+0] = BACKGROUND_RED;
		HoureAndMinutesOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		HoureAndMinutesOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = DOT_RED;
     ec6:	86 8f       	std	Z+30, r24	; 0x1e
		HoureAndMinutesOnThreeDots[3*i+1] = DOT_GREEN;
     ec8:	87 8f       	std	Z+31, r24	; 0x1f
		HoureAndMinutesOnThreeDots[3*i+2] = DOT_BLUE;
     eca:	80 a3       	std	Z+32, r24	; 0x20
		HoureAndMinutesOnThreeDots[3*i+0] = BACKGROUND_RED;
		HoureAndMinutesOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		HoureAndMinutesOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureAndMinutesOnThreeDots[3*i+0] = DOT_RED;
     ecc:	81 a3       	std	Z+33, r24	; 0x21
		HoureAndMinutesOnThreeDots[3*i+1] = DOT_GREEN;
     ece:	82 a3       	std	Z+34, r24	; 0x22
		HoureAndMinutesOnThreeDots[3*i+2] = DOT_BLUE;
     ed0:	83 a3       	std	Z+35, r24	; 0x23
     ed2:	e9 e0       	ldi	r30, 0x09	; 9
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	28 e1       	ldi	r18, 0x18	; 24
     ed8:	32 e0       	ldi	r19, 0x02	; 2
	}
	
	/*Houre with second */
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = HOUR_RED + SECOND_RED;
     eda:	80 83       	st	Z, r24
		HouresAndSecondsOnTwoDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
     edc:	11 82       	std	Z+1, r1	; 0x01
		HouresAndSecondsOnTwoDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
     ede:	82 83       	std	Z+2, r24	; 0x02
     ee0:	33 96       	adiw	r30, 0x03	; 3
		HoureAndMinutesOnThreeDots[3*i+2] = DOT_BLUE;
	}
	
	/*Houre with second */
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     ee2:	e2 17       	cp	r30, r18
     ee4:	f3 07       	cpc	r31, r19
     ee6:	c9 f7       	brne	.-14     	; 0xeda <_Z11createLinesv+0x34a>
		HouresAndSecondsOnTwoDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     ee8:	e9 e0       	ldi	r30, 0x09	; 9
     eea:	f2 e0       	ldi	r31, 0x02	; 2
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	87 87       	std	Z+15, r24	; 0x0f
		HouresAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     ef0:	10 8a       	std	Z+16, r1	; 0x10
		HouresAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     ef2:	11 8a       	std	Z+17, r1	; 0x11
		HouresAndSecondsOnTwoDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     ef4:	82 8b       	std	Z+18, r24	; 0x12
		HouresAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     ef6:	13 8a       	std	Z+19, r1	; 0x13
		HouresAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     ef8:	14 8a       	std	Z+20, r1	; 0x14
		HouresAndSecondsOnTwoDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     efa:	85 8b       	std	Z+21, r24	; 0x15
		HouresAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     efc:	16 8a       	std	Z+22, r1	; 0x16
		HouresAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     efe:	17 8a       	std	Z+23, r1	; 0x17
		HouresAndSecondsOnTwoDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     f00:	80 8f       	std	Z+24, r24	; 0x18
		HouresAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     f02:	11 8e       	std	Z+25, r1	; 0x19
		HouresAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     f04:	12 8e       	std	Z+26, r1	; 0x1a
	}
	for(uint8_t i=SECOND_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = BACKGROUND_RED;
     f06:	13 8e       	std	Z+27, r1	; 0x1b
		HouresAndSecondsOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     f08:	14 8e       	std	Z+28, r1	; 0x1c
		HouresAndSecondsOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     f0a:	15 8e       	std	Z+29, r1	; 0x1d
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = DOT_RED;
     f0c:	86 8f       	std	Z+30, r24	; 0x1e
		HouresAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     f0e:	87 8f       	std	Z+31, r24	; 0x1f
		HouresAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     f10:	80 a3       	std	Z+32, r24	; 0x20
		HouresAndSecondsOnTwoDots[3*i+0] = BACKGROUND_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HouresAndSecondsOnTwoDots[3*i+0] = DOT_RED;
     f12:	81 a3       	std	Z+33, r24	; 0x21
		HouresAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     f14:	82 a3       	std	Z+34, r24	; 0x22
		HouresAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     f16:	83 a3       	std	Z+35, r24	; 0x23
     f18:	e5 ee       	ldi	r30, 0xE5	; 229
     f1a:	f1 e0       	ldi	r31, 0x01	; 1
     f1c:	24 ef       	ldi	r18, 0xF4	; 244
     f1e:	31 e0       	ldi	r19, 0x01	; 1
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = HOUR_RED + SECOND_RED;
     f20:	80 83       	st	Z, r24
		HouresAndSecondsOnThreeDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
     f22:	11 82       	std	Z+1, r1	; 0x01
		HouresAndSecondsOnThreeDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
     f24:	82 83       	std	Z+2, r24	; 0x02
     f26:	33 96       	adiw	r30, 0x03	; 3
		HouresAndSecondsOnTwoDots[3*i+0] = DOT_RED;
		HouresAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
		HouresAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     f28:	e2 17       	cp	r30, r18
     f2a:	f3 07       	cpc	r31, r19
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <_Z11createLinesv+0x390>
		HouresAndSecondsOnThreeDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     f2e:	e5 ee       	ldi	r30, 0xE5	; 229
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	87 87       	std	Z+15, r24	; 0x0f
		HouresAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     f36:	10 8a       	std	Z+16, r1	; 0x10
		HouresAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     f38:	11 8a       	std	Z+17, r1	; 0x11
		HouresAndSecondsOnThreeDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     f3a:	82 8b       	std	Z+18, r24	; 0x12
		HouresAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     f3c:	13 8a       	std	Z+19, r1	; 0x13
		HouresAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     f3e:	14 8a       	std	Z+20, r1	; 0x14
		HouresAndSecondsOnThreeDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     f40:	85 8b       	std	Z+21, r24	; 0x15
		HouresAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     f42:	16 8a       	std	Z+22, r1	; 0x16
		HouresAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     f44:	17 8a       	std	Z+23, r1	; 0x17
		HouresAndSecondsOnThreeDots[3*i+0] = HOUR_RED + SECOND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = HOUR_GREEN + SECOND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = HOUR_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<SECOND_SIZE;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     f46:	80 8f       	std	Z+24, r24	; 0x18
		HouresAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     f48:	11 8e       	std	Z+25, r1	; 0x19
		HouresAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     f4a:	12 8e       	std	Z+26, r1	; 0x1a
		HouresAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     f4c:	83 8f       	std	Z+27, r24	; 0x1b
		HouresAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     f4e:	84 8f       	std	Z+28, r24	; 0x1c
		HouresAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     f50:	85 8f       	std	Z+29, r24	; 0x1d
		HouresAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     f52:	86 8f       	std	Z+30, r24	; 0x1e
		HouresAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     f54:	87 8f       	std	Z+31, r24	; 0x1f
		HouresAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     f56:	80 a3       	std	Z+32, r24	; 0x20
		HouresAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		HouresAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HouresAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     f58:	81 a3       	std	Z+33, r24	; 0x21
		HouresAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     f5a:	82 a3       	std	Z+34, r24	; 0x22
		HouresAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     f5c:	83 a3       	std	Z+35, r24	; 0x23
     f5e:	e1 ec       	ldi	r30, 0xC1	; 193
     f60:	f1 e0       	ldi	r31, 0x01	; 1
     f62:	26 ed       	ldi	r18, 0xD6	; 214
     f64:	31 e0       	ldi	r19, 0x01	; 1
	}
	/*Minute with second */
	/*On two dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
     f66:	80 83       	st	Z, r24
		MinuteAndSecondsOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
     f68:	81 83       	std	Z+1, r24	; 0x01
		MinuteAndSecondsOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	33 96       	adiw	r30, 0x03	; 3
		HouresAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
		HouresAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
	}
	/*Minute with second */
	/*On two dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
     f6e:	e2 17       	cp	r30, r18
     f70:	f3 07       	cpc	r31, r19
     f72:	c9 f7       	brne	.-14     	; 0xf66 <_Z11createLinesv+0x3d6>
		MinuteAndSecondsOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
		MinuteAndSecondsOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		MinuteAndSecondsOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     f74:	e1 ec       	ldi	r30, 0xC1	; 193
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	85 8b       	std	Z+21, r24	; 0x15
		MinuteAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     f7c:	16 8a       	std	Z+22, r1	; 0x16
		MinuteAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     f7e:	17 8a       	std	Z+23, r1	; 0x17
		MinuteAndSecondsOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
		MinuteAndSecondsOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		MinuteAndSecondsOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = SECOND_RED;
     f80:	80 8f       	std	Z+24, r24	; 0x18
		MinuteAndSecondsOnTwoDots[3*i+1] = SECOND_GREEN;
     f82:	11 8e       	std	Z+25, r1	; 0x19
		MinuteAndSecondsOnTwoDots[3*i+2] = SECOND_BLUE;
     f84:	12 8e       	std	Z+26, r1	; 0x1a
	}
	for(uint8_t i=SECOND_SIZE;i<NUMBER_OF_DIAG_LEDS-2;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = BACKGROUND_RED;
     f86:	13 8e       	std	Z+27, r1	; 0x1b
		MinuteAndSecondsOnTwoDots[3*i+1] = BACKGROUND_GREEN;
     f88:	14 8e       	std	Z+28, r1	; 0x1c
		MinuteAndSecondsOnTwoDots[3*i+2] = BACKGROUND_BLUE;
     f8a:	15 8e       	std	Z+29, r1	; 0x1d
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = DOT_RED;
     f8c:	86 8f       	std	Z+30, r24	; 0x1e
		MinuteAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     f8e:	87 8f       	std	Z+31, r24	; 0x1f
		MinuteAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     f90:	80 a3       	std	Z+32, r24	; 0x20
		MinuteAndSecondsOnTwoDots[3*i+0] = BACKGROUND_RED;
		MinuteAndSecondsOnTwoDots[3*i+1] = BACKGROUND_GREEN;
		MinuteAndSecondsOnTwoDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		MinuteAndSecondsOnTwoDots[3*i+0] = DOT_RED;
     f92:	81 a3       	std	Z+33, r24	; 0x21
		MinuteAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
     f94:	82 a3       	std	Z+34, r24	; 0x22
		MinuteAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
     f96:	83 a3       	std	Z+35, r24	; 0x23
     f98:	ed e9       	ldi	r30, 0x9D	; 157
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	22 eb       	ldi	r18, 0xB2	; 178
     f9e:	31 e0       	ldi	r19, 0x01	; 1
	}
	/*On three dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
     fa0:	80 83       	st	Z, r24
		MinuteAndSecondsOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
     fa2:	81 83       	std	Z+1, r24	; 0x01
		MinuteAndSecondsOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
     fa4:	12 82       	std	Z+2, r1	; 0x02
     fa6:	33 96       	adiw	r30, 0x03	; 3
		MinuteAndSecondsOnTwoDots[3*i+0] = DOT_RED;
		MinuteAndSecondsOnTwoDots[3*i+1] = DOT_GREEN;
		MinuteAndSecondsOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<MINUTE_SIZE;i++){
     fa8:	e2 17       	cp	r30, r18
     faa:	f3 07       	cpc	r31, r19
     fac:	c9 f7       	brne	.-14     	; 0xfa0 <_Z11createLinesv+0x410>
		MinuteAndSecondsOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
		MinuteAndSecondsOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     fae:	ed e9       	ldi	r30, 0x9D	; 157
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	85 8b       	std	Z+21, r24	; 0x15
		MinuteAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     fb6:	16 8a       	std	Z+22, r1	; 0x16
		MinuteAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     fb8:	17 8a       	std	Z+23, r1	; 0x17
		MinuteAndSecondsOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
		MinuteAndSecondsOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = SECOND_RED;
     fba:	80 8f       	std	Z+24, r24	; 0x18
		MinuteAndSecondsOnThreeDots[3*i+1] = SECOND_GREEN;
     fbc:	11 8e       	std	Z+25, r1	; 0x19
		MinuteAndSecondsOnThreeDots[3*i+2] = SECOND_BLUE;
     fbe:	12 8e       	std	Z+26, r1	; 0x1a
		MinuteAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		MinuteAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     fc0:	83 8f       	std	Z+27, r24	; 0x1b
		MinuteAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     fc2:	84 8f       	std	Z+28, r24	; 0x1c
		MinuteAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     fc4:	85 8f       	std	Z+29, r24	; 0x1d
		MinuteAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		MinuteAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     fc6:	86 8f       	std	Z+30, r24	; 0x1e
		MinuteAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     fc8:	87 8f       	std	Z+31, r24	; 0x1f
		MinuteAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     fca:	80 a3       	std	Z+32, r24	; 0x20
		MinuteAndSecondsOnThreeDots[3*i+0] = BACKGROUND_RED;
		MinuteAndSecondsOnThreeDots[3*i+1] = BACKGROUND_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		MinuteAndSecondsOnThreeDots[3*i+0] = DOT_RED;
     fcc:	81 a3       	std	Z+33, r24	; 0x21
		MinuteAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
     fce:	82 a3       	std	Z+34, r24	; 0x22
		MinuteAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
     fd0:	83 a3       	std	Z+35, r24	; 0x23
     fd2:	e9 e7       	ldi	r30, 0x79	; 121
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	28 e8       	ldi	r18, 0x88	; 136
     fd8:	31 e0       	ldi	r19, 0x01	; 1
	}
	/*Minute houre and second together */
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
     fda:	80 83       	st	Z, r24
		HoureMinuteSecondOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
     fdc:	81 83       	std	Z+1, r24	; 0x01
		HoureMinuteSecondOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
     fde:	82 83       	std	Z+2, r24	; 0x02
     fe0:	33 96       	adiw	r30, 0x03	; 3
		MinuteAndSecondsOnThreeDots[3*i+1] = DOT_GREEN;
		MinuteAndSecondsOnThreeDots[3*i+2] = DOT_BLUE;
	}
	/*Minute houre and second together */
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
     fe2:	e2 17       	cp	r30, r18
     fe4:	f3 07       	cpc	r31, r19
     fe6:	c9 f7       	brne	.-14     	; 0xfda <_Z11createLinesv+0x44a>
		HoureMinuteSecondOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
     fe8:	e9 e7       	ldi	r30, 0x79	; 121
     fea:	f1 e0       	ldi	r31, 0x01	; 1
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	87 87       	std	Z+15, r24	; 0x0f
		HoureMinuteSecondOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
     ff0:	80 8b       	std	Z+16, r24	; 0x10
		HoureMinuteSecondOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
     ff2:	11 8a       	std	Z+17, r1	; 0x11
		HoureMinuteSecondOnTwoDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnTwoDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnTwoDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
     ff4:	82 8b       	std	Z+18, r24	; 0x12
		HoureMinuteSecondOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
     ff6:	83 8b       	std	Z+19, r24	; 0x13
		HoureMinuteSecondOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
     ff8:	14 8a       	std	Z+20, r1	; 0x14
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = SECOND_RED;
     ffa:	85 8b       	std	Z+21, r24	; 0x15
		HoureMinuteSecondOnTwoDots[3*i+1] = SECOND_GREEN;
     ffc:	16 8a       	std	Z+22, r1	; 0x16
		HoureMinuteSecondOnTwoDots[3*i+2] = SECOND_BLUE;
     ffe:	17 8a       	std	Z+23, r1	; 0x17
		HoureMinuteSecondOnTwoDots[3*i+0] = MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnTwoDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnTwoDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = SECOND_RED;
    1000:	80 8f       	std	Z+24, r24	; 0x18
		HoureMinuteSecondOnTwoDots[3*i+1] = SECOND_GREEN;
    1002:	11 8e       	std	Z+25, r1	; 0x19
		HoureMinuteSecondOnTwoDots[3*i+2] = SECOND_BLUE;
    1004:	12 8e       	std	Z+26, r1	; 0x1a
	}
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+0]=BACKGROUND_RED;
    1006:	13 8e       	std	Z+27, r1	; 0x1b
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+1]=BACKGROUND_GREEN;
    1008:	14 8e       	std	Z+28, r1	; 0x1c
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+2]=BACKGROUND_BLUE;
    100a:	15 8e       	std	Z+29, r1	; 0x1d
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = DOT_RED;
    100c:	86 8f       	std	Z+30, r24	; 0x1e
		HoureMinuteSecondOnTwoDots[3*i+1] = DOT_GREEN;
    100e:	87 8f       	std	Z+31, r24	; 0x1f
		HoureMinuteSecondOnTwoDots[3*i+2] = DOT_BLUE;
    1010:	80 a3       	std	Z+32, r24	; 0x20
	}
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+0]=BACKGROUND_RED;
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+1]=BACKGROUND_GREEN;
	HoureMinuteSecondOnTwoDots[3*SECOND_SIZE+2]=BACKGROUND_BLUE;
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-2;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnTwoDots[3*i+0] = DOT_RED;
    1012:	81 a3       	std	Z+33, r24	; 0x21
		HoureMinuteSecondOnTwoDots[3*i+1] = DOT_GREEN;
    1014:	82 a3       	std	Z+34, r24	; 0x22
		HoureMinuteSecondOnTwoDots[3*i+2] = DOT_BLUE;
    1016:	83 a3       	std	Z+35, r24	; 0x23
    1018:	e5 e5       	ldi	r30, 0x55	; 85
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	24 e6       	ldi	r18, 0x64	; 100
    101e:	31 e0       	ldi	r19, 0x01	; 1
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
    1020:	80 83       	st	Z, r24
		HoureMinuteSecondOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
    1022:	81 83       	std	Z+1, r24	; 0x01
		HoureMinuteSecondOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
    1024:	82 83       	std	Z+2, r24	; 0x02
    1026:	33 96       	adiw	r30, 0x03	; 3
		HoureMinuteSecondOnTwoDots[3*i+0] = DOT_RED;
		HoureMinuteSecondOnTwoDots[3*i+1] = DOT_GREEN;
		HoureMinuteSecondOnTwoDots[3*i+2] = DOT_BLUE;
	}
	/*On three dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
    1028:	e2 17       	cp	r30, r18
    102a:	f3 07       	cpc	r31, r19
    102c:	c9 f7       	brne	.-14     	; 0x1020 <_Z11createLinesv+0x490>
		HoureMinuteSecondOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
    102e:	e5 e5       	ldi	r30, 0x55	; 85
    1030:	f1 e0       	ldi	r31, 0x01	; 1
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	87 87       	std	Z+15, r24	; 0x0f
		HoureMinuteSecondOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
    1036:	80 8b       	std	Z+16, r24	; 0x10
		HoureMinuteSecondOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
    1038:	11 8a       	std	Z+17, r1	; 0x11
		HoureMinuteSecondOnThreeDots[3*i+0] = HOUR_RED + MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = HOUR_GREEN + MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = HOUR_BLUE + MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=HOUR_SIZE;i<MINUTE_SIZE;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
    103a:	82 8b       	std	Z+18, r24	; 0x12
		HoureMinuteSecondOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
    103c:	83 8b       	std	Z+19, r24	; 0x13
		HoureMinuteSecondOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
    103e:	14 8a       	std	Z+20, r1	; 0x14
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = SECOND_RED;
    1040:	85 8b       	std	Z+21, r24	; 0x15
		HoureMinuteSecondOnThreeDots[3*i+1] = SECOND_GREEN;
    1042:	16 8a       	std	Z+22, r1	; 0x16
		HoureMinuteSecondOnThreeDots[3*i+2] = SECOND_BLUE;
    1044:	17 8a       	std	Z+23, r1	; 0x17
		HoureMinuteSecondOnThreeDots[3*i+0] = MINUTE_RED + SECOND_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = MINUTE_GREEN + SECOND_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = MINUTE_BLUE + SECOND_BLUE;
	}
	for(uint8_t i=MINUTE_SIZE;i<SECOND_SIZE;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = SECOND_RED;
    1046:	80 8f       	std	Z+24, r24	; 0x18
		HoureMinuteSecondOnThreeDots[3*i+1] = SECOND_GREEN;
    1048:	11 8e       	std	Z+25, r1	; 0x19
		HoureMinuteSecondOnThreeDots[3*i+2] = SECOND_BLUE;
    104a:	12 8e       	std	Z+26, r1	; 0x1a
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = DOT_RED;
    104c:	83 8f       	std	Z+27, r24	; 0x1b
		HoureMinuteSecondOnThreeDots[3*i+1] = DOT_GREEN;
    104e:	84 8f       	std	Z+28, r24	; 0x1c
		HoureMinuteSecondOnThreeDots[3*i+2] = DOT_BLUE;
    1050:	85 8f       	std	Z+29, r24	; 0x1d
		HoureMinuteSecondOnThreeDots[3*i+0] = SECOND_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = SECOND_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = SECOND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = DOT_RED;
    1052:	86 8f       	std	Z+30, r24	; 0x1e
		HoureMinuteSecondOnThreeDots[3*i+1] = DOT_GREEN;
    1054:	87 8f       	std	Z+31, r24	; 0x1f
		HoureMinuteSecondOnThreeDots[3*i+2] = DOT_BLUE;
    1056:	80 a3       	std	Z+32, r24	; 0x20
		HoureMinuteSecondOnThreeDots[3*i+0] = SECOND_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = SECOND_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = SECOND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = DOT_RED;
    1058:	81 a3       	std	Z+33, r24	; 0x21
		HoureMinuteSecondOnThreeDots[3*i+1] = DOT_GREEN;
    105a:	82 a3       	std	Z+34, r24	; 0x22
		HoureMinuteSecondOnThreeDots[3*i+2] = DOT_BLUE;
    105c:	83 a3       	std	Z+35, r24	; 0x23
	}
    105e:	18 c0       	rjmp	.+48     	; 0x1090 <_Z11createLinesv+0x500>
		OnylHoureOnOneDot[3*i+0] = BACKGROUND_RED;
		OnylHoureOnOneDot[3*i+1] = BACKGROUND_GREEN;
		OnylHoureOnOneDot[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-1;i<NUMBER_OF_DIAG_LEDS;i++){
		OnylHoureOnOneDot[3*i+0] = DOT_RED;
    1060:	e1 ee       	ldi	r30, 0xE1	; 225
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	81 a3       	std	Z+33, r24	; 0x21
		OnylHoureOnOneDot[3*i+1] = DOT_GREEN;
    1068:	82 a3       	std	Z+34, r24	; 0x22
		OnylHoureOnOneDot[3*i+2] = DOT_BLUE;
    106a:	83 a3       	std	Z+35, r24	; 0x23
    106c:	ad eb       	ldi	r26, 0xBD	; 189
    106e:	b2 e0       	ldi	r27, 0x02	; 2
    1070:	8c ec       	ldi	r24, 0xCC	; 204
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	fd 01       	movw	r30, r26
	}
	/*On two dots */
	for(uint8_t i=0;i<HOUR_SIZE;i++){
		OnylHoureOnTwoDots[3*i+0] = HOUR_RED;
		OnylHoureOnTwoDots[3*i+1] = HOUR_GREEN;
		OnylHoureOnTwoDots[3*i+2] = HOUR_BLUE;
    1076:	2f ef       	ldi	r18, 0xFF	; 255
    1078:	83 ce       	rjmp	.-762    	; 0xd80 <_Z11createLinesv+0x1f0>
		NoNiddleOneDot[3*i+0] = BACKGROUND_RED;
		NoNiddleOneDot[3*i+1] = BACKGROUND_GREEN;
		NoNiddleOneDot[3*i+2] = BACKGROUND_BLUE;
	}
	for(uint8_t i=NUMBER_OF_DIAG_LEDS - 1;i<NUMBER_OF_DIAG_LEDS;i++){
		NoNiddleOneDot[3*i+0] = DOT_RED;
    107a:	e1 e0       	ldi	r30, 0x01	; 1
    107c:	f4 e0       	ldi	r31, 0x04	; 4
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	81 a3       	std	Z+33, r24	; 0x21
		NoNiddleOneDot[3*i+1] = DOT_GREEN;
    1082:	82 a3       	std	Z+34, r24	; 0x22
		NoNiddleOneDot[3*i+2] = DOT_BLUE;
    1084:	83 a3       	std	Z+35, r24	; 0x23
    1086:	ed ed       	ldi	r30, 0xDD	; 221
    1088:	f3 e0       	ldi	r31, 0x03	; 3
    108a:	8b ef       	ldi	r24, 0xFB	; 251
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	91 cd       	rjmp	.-1246   	; 0xbb2 <_Z11createLinesv+0x22>
	for(uint8_t i=NUMBER_OF_DIAG_LEDS-3;i<NUMBER_OF_DIAG_LEDS;i++){
		HoureMinuteSecondOnThreeDots[3*i+0] = DOT_RED;
		HoureMinuteSecondOnThreeDots[3*i+1] = DOT_GREEN;
		HoureMinuteSecondOnThreeDots[3*i+2] = DOT_BLUE;
	}
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <_Z4initv>:
inline void init()
{
	#ifdef DEBUG_IO
	D13output();
	#endif
	createLines();
    1098:	0e 94 c8 05 	call	0xb90	; 0xb90 <_Z11createLinesv>
 inline void timerSecondInit()
{
	/*
	| timer set to CTC, NO interrupts, intended setting flag with a secound of delay
	*/
	TCCR2A = (1<<WGM21);
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS20) | (1<<CS21) | (1<<CS22);
    10a2:	87 e0       	ldi	r24, 0x07	; 7
    10a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCNT2=0;
    10a8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=125;
    10ac:	8d e7       	ldi	r24, 0x7D	; 125
    10ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TIMSK2 |= 1<<OCIE2A;
    10b2:	e0 e7       	ldi	r30, 0x70	; 112
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	80 83       	st	Z, r24
	}
}	

inline void timerDisplayInit()
{
	TCCR1A = 0;
    10bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS10) | (1<<WGM13) | (1<<WGM12) ;
    10c0:	89 e1       	ldi	r24, 0x19	; 25
    10c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 =0;
    10c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//ICR1=8885; //
	ICR1=8888; // TEST
    10ce:	88 eb       	ldi	r24, 0xB8	; 184
    10d0:	92 e2       	ldi	r25, 0x22	; 34
    10d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    10d6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TIMSK1 |= 1<<OCIE1A;
    10da:	ef e6       	ldi	r30, 0x6F	; 111
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	80 83       	st	Z, r24
	return 0;
} 

inline void initPosControl()
{
	clrD1();
    10e4:	59 98       	cbi	0x0b, 1	; 11
	D1inputpull();
    10e6:	51 98       	cbi	0x0a, 1	; 10
    10e8:	59 9a       	sbi	0x0b, 1	; 11
	#endif
	createLines();
	timerSecondInit();
	timerDisplayInit();
	initPosControl();
	sei();
    10ea:	78 94       	sei
    10ec:	eb e0       	ldi	r30, 0x0B	; 11
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	2f e2       	ldi	r18, 0x2F	; 47
    10f2:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i=0;
	for(;i<3*NUMBER_OF_DIAG_LEDS;i++)
	{
		outTable[i]=10;
    10f4:	8a e0       	ldi	r24, 0x0A	; 10
    10f6:	81 93       	st	Z+, r24
	timerSecondInit();
	timerDisplayInit();
	initPosControl();
	sei();
	uint8_t i=0;
	for(;i<3*NUMBER_OF_DIAG_LEDS;i++)
    10f8:	2e 17       	cp	r18, r30
    10fa:	3f 07       	cpc	r19, r31
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <_Z4initv+0x5e>
	{
		outTable[i]=10;
	}
	display.SetLedRGBfromTable(outTable);
    10fe:	6b e0       	ldi	r22, 0x0B	; 11
    1100:	71 e0       	ldi	r23, 0x01	; 1
    1102:	8f e2       	ldi	r24, 0x2F	; 47
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	display.Display();	
}

inline void waitAWhile()
{
	ready=1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ready>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
    1110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    1114:	88 23       	and	r24, r24
    1116:	e1 f3       	breq	.-8      	; 0x1110 <_Z4initv+0x78>
	{
		secondTimerFlag=0;
    1118:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
    111c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    1120:	88 23       	and	r24, r24
    1122:	e1 f3       	breq	.-8      	; 0x111c <_Z4initv+0x84>
	{
		secondTimerFlag=0;
    1124:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	ready=1;
	while(!fSecondTimerFlag())
		;
	while(!fSecondTimerFlag())
		;
	ready=0;
    1128:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ready>
	
	for(;i<3*NUMBER_OF_DIAG_LEDS;i++)
	{
		outTable[i]=0;
	}
	display.SetLedRGBfromTable(outTable);
    112c:	6b e0       	ldi	r22, 0x0B	; 11
    112e:	71 e0       	ldi	r23, 0x01	; 1
    1130:	8f e2       	ldi	r24, 0x2F	; 47
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
    1138:	08 95       	ret

0000113a <main>:
		}
	}
}

int main(void)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	1f 92       	push	r1
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	D13output();
    1144:	25 9a       	sbi	0x04, 5	; 4
	//setD13();
	init();
    1146:	0e 94 4c 08 	call	0x1098	; 0x1098 <_Z4initv>
	#endif
    uint8_t linesCounter=0;
	//testPos();
	//testTIME();
	//test();
	testArtifacts();
    114a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z13testArtifactsv>
	ready=1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ready>
	init();
	#ifdef DEBUG_IO
	//uint8_t state=0;
	uint16_t times=0;
	#endif
    uint8_t linesCounter=0;
    1154:	71 2c       	mov	r7, r1
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
    1156:	0f 2e       	mov	r0, r31
    1158:	f1 ee       	ldi	r31, 0xE1	; 225
    115a:	8f 2e       	mov	r8, r31
    115c:	f2 e0       	ldi	r31, 0x02	; 2
    115e:	9f 2e       	mov	r9, r31
    1160:	f0 2d       	mov	r31, r0
		}
		return NoNiddleOneDot;
    1162:	0f 2e       	mov	r0, r31
    1164:	f1 e0       	ldi	r31, 0x01	; 1
    1166:	ef 2e       	mov	r14, r31
    1168:	f4 e0       	ldi	r31, 0x04	; 4
    116a:	ff 2e       	mov	r15, r31
    116c:	f0 2d       	mov	r31, r0
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
    116e:	0f 2e       	mov	r0, r31
    1170:	fd e4       	ldi	r31, 0x4D	; 77
    1172:	af 2e       	mov	r10, r31
    1174:	f3 e0       	ldi	r31, 0x03	; 3
    1176:	bf 2e       	mov	r11, r31
    1178:	f0 2d       	mov	r31, r0
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
    117a:	0f 2e       	mov	r0, r31
    117c:	fd ed       	ldi	r31, 0xDD	; 221
    117e:	cf 2e       	mov	r12, r31
    1180:	f3 e0       	ldi	r31, 0x03	; 3
    1182:	df 2e       	mov	r13, r31
    1184:	f0 2d       	mov	r31, r0
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
    1186:	0f 2e       	mov	r0, r31
    1188:	fd eb       	ldi	r31, 0xBD	; 189
    118a:	2f 2e       	mov	r2, r31
    118c:	f2 e0       	ldi	r31, 0x02	; 2
    118e:	3f 2e       	mov	r3, r31
    1190:	f0 2d       	mov	r31, r0
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
    1192:	0f 2e       	mov	r0, r31
    1194:	f9 e7       	ldi	r31, 0x79	; 121
    1196:	4f 2e       	mov	r4, r31
    1198:	f1 e0       	ldi	r31, 0x01	; 1
    119a:	5f 2e       	mov	r5, r31
    119c:	f0 2d       	mov	r31, r0
		displayInterruptProd();
}

inline void resetDisplayTimer()
{
	TCNT1=0;
    119e:	04 e8       	ldi	r16, 0x84	; 132
    11a0:	10 e0       	ldi	r17, 0x00	; 0
	//test();
	testArtifacts();
	ready=1;
    while (1) 
    {
		if (linesCounter==LINES_PER_FRAME-1)
    11a2:	87 e7       	ldi	r24, 0x77	; 119
    11a4:	78 12       	cpse	r7, r24
    11a6:	3f c1       	rjmp	.+638    	; 0x1426 <main+0x2ec>
		displayInterruptProd();
}

inline void resetDisplayTimer()
{
	TCNT1=0;
    11a8:	f8 01       	movw	r30, r16
    11aa:	11 82       	std	Z+1, r1	; 0x01
    11ac:	10 82       	st	Z, r1


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
    11ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    11b2:	88 23       	and	r24, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <main+0x7e>
    11b6:	42 c0       	rjmp	.+132    	; 0x123c <main+0x102>
	{
		secondTimerFlag=0;
    11b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if(seconds>=30)
		min_pos++;
}
inline void addSecond()
{
	if(seconds==59){
    11bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
    11c0:	8b 33       	cpi	r24, 0x3B	; 59
    11c2:	b9 f4       	brne	.+46     	; 0x11f2 <main+0xb8>
		seconds=0;
    11c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
		if(minutes==59)
    11c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    11cc:	8b 33       	cpi	r24, 0x3B	; 59
    11ce:	69 f4       	brne	.+26     	; 0x11ea <main+0xb0>
		{
			minutes=0;
    11d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			if(hour==11)
    11d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
    11d8:	8b 30       	cpi	r24, 0x0B	; 11
    11da:	19 f4       	brne	.+6      	; 0x11e2 <main+0xa8>
				hour=0;
    11dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
    11e0:	4b c2       	rjmp	.+1174   	; 0x1678 <main+0x53e>
			else
				hour++;
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
    11e8:	47 c2       	rjmp	.+1166   	; 0x1678 <main+0x53e>
		}
		else
			minutes++;
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <main+0xbe>
	}
	else
		seconds++;
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
    11f8:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
    11fc:	83 2f       	mov	r24, r19
	hour_pos=hour*10; 
    11fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hour>
    1202:	99 0f       	add	r25, r25
    1204:	29 2f       	mov	r18, r25
    1206:	22 0f       	add	r18, r18
    1208:	22 0f       	add	r18, r18
    120a:	92 0f       	add	r25, r18
    120c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	while(tmp>=6)	
    1210:	36 30       	cpi	r19, 0x06	; 6
    1212:	54 f0       	brlt	.+20     	; 0x1228 <main+0xee>
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	01 c0       	rjmp	.+2      	; 0x121a <main+0xe0>
    1218:	92 2f       	mov	r25, r18
    121a:	86 50       	subi	r24, 0x06	; 6
    121c:	21 e0       	ldi	r18, 0x01	; 1
    121e:	29 0f       	add	r18, r25
    1220:	86 30       	cpi	r24, 0x06	; 6
    1222:	d4 f7       	brge	.-12     	; 0x1218 <main+0xde>
    1224:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	{
		hour_pos++;
		tmp-=6;
	}
	min_pos=2*minutes;
    1228:	33 0f       	add	r19, r19
    122a:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
	if(seconds>=30)
    122e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
    1232:	8e 31       	cpi	r24, 0x1E	; 30
    1234:	18 f0       	brcs	.+6      	; 0x123c <main+0x102>
		min_pos++;
    1236:	3f 5f       	subi	r19, 0xFF	; 255
    1238:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
 * 		.niddlePosition's
 * we start displaying from 12
*/
inline uint8_t* calculateLine(){
	/* First we need to chose if we need to display one,two or three dotted clock's frame */
	if(exactOneDot == 0){//sprawdzamy dalej
    123c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
    1240:	81 11       	cpse	r24, r1
    1242:	87 c0       	rjmp	.+270    	; 0x1352 <main+0x218>
		if(exactMinute == 0){//we display on three dots
    1244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
    1248:	81 11       	cpse	r24, r1
    124a:	44 c0       	rjmp	.+136    	; 0x12d4 <main+0x19a>
			if(hour_pos == position){
    124c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    1250:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    1254:	98 13       	cpse	r25, r24
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <main+0x15e>
				if(min_pos == position){
    1258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
    125c:	98 13       	cpse	r25, r24
    125e:	0e c0       	rjmp	.+28     	; 0x127c <main+0x142>
					if(seconds*2 == position){
    1260:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	89 2f       	mov	r24, r25
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	28 17       	cp	r18, r24
    1270:	39 07       	cpc	r19, r25
    1272:	09 f4       	brne	.+2      	; 0x1276 <main+0x13c>
    1274:	80 c0       	rjmp	.+256    	; 0x1376 <main+0x23c>
						return HoureMinuteSecondOnThreeDots;
					}
					return HoureAndMinutesOnThreeDots;
    1276:	6d e2       	ldi	r22, 0x2D	; 45
    1278:	72 e0       	ldi	r23, 0x02	; 2
    127a:	98 c0       	rjmp	.+304    	; 0x13ac <main+0x272>
				}
				if(seconds*2 == position){
    127c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	89 2f       	mov	r24, r25
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <main+0x158>
    1290:	75 c0       	rjmp	.+234    	; 0x137c <main+0x242>
					return HouresAndSecondsOnThreeDots;
				}
				return OnylHoureOnThreeDots;
    1292:	69 e9       	ldi	r22, 0x99	; 153
    1294:	72 e0       	ldi	r23, 0x02	; 2
    1296:	8a c0       	rjmp	.+276    	; 0x13ac <main+0x272>
			}else{
				if(min_pos == position){
    1298:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    129c:	89 13       	cpse	r24, r25
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <main+0x180>
					if(seconds*2 == position){
    12a0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <main+0x17a>
    12b2:	67 c0       	rjmp	.+206    	; 0x1382 <main+0x248>
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
    12b4:	65 e0       	ldi	r22, 0x05	; 5
    12b6:	73 e0       	ldi	r23, 0x03	; 3
    12b8:	79 c0       	rjmp	.+242    	; 0x13ac <main+0x272>
				}
				if(seconds*2 == position){
    12ba:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	28 17       	cp	r18, r24
    12c8:	39 07       	cpc	r19, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <main+0x194>
    12cc:	5d c0       	rjmp	.+186    	; 0x1388 <main+0x24e>
					return OnylSecondsOnThreeDots;
				}
				return NoNiddleThreeDots;
    12ce:	69 eb       	ldi	r22, 0xB9	; 185
    12d0:	73 e0       	ldi	r23, 0x03	; 3
    12d2:	6c c0       	rjmp	.+216    	; 0x13ac <main+0x272>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
    12d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    12d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    12dc:	98 13       	cpse	r25, r24
    12de:	1e c0       	rjmp	.+60     	; 0x131c <main+0x1e2>
				if(min_pos == position){
    12e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
    12e4:	98 13       	cpse	r25, r24
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <main+0x1ca>
					if(seconds*2 == position){
    12e8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	22 0f       	add	r18, r18
    12f0:	33 1f       	adc	r19, r19
    12f2:	89 2f       	mov	r24, r25
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	28 17       	cp	r18, r24
    12f8:	39 07       	cpc	r19, r25
    12fa:	09 f4       	brne	.+2      	; 0x12fe <main+0x1c4>
    12fc:	48 c0       	rjmp	.+144    	; 0x138e <main+0x254>
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
    12fe:	61 e5       	ldi	r22, 0x51	; 81
    1300:	72 e0       	ldi	r23, 0x02	; 2
    1302:	54 c0       	rjmp	.+168    	; 0x13ac <main+0x272>
				}
				if(seconds*2 == position){
    1304:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	89 2f       	mov	r24, r25
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	28 17       	cp	r18, r24
    1314:	39 07       	cpc	r19, r25
    1316:	e9 f1       	breq	.+122    	; 0x1392 <main+0x258>
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
    1318:	b1 01       	movw	r22, r2
    131a:	48 c0       	rjmp	.+144    	; 0x13ac <main+0x272>
			}else{
				if(min_pos == position){
    131c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    1320:	89 13       	cpse	r24, r25
    1322:	0c c0       	rjmp	.+24     	; 0x133c <main+0x202>
					if(seconds*2 == position){
    1324:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	28 17       	cp	r18, r24
    1332:	39 07       	cpc	r19, r25
    1334:	89 f1       	breq	.+98     	; 0x1398 <main+0x25e>
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
    1336:	69 e2       	ldi	r22, 0x29	; 41
    1338:	73 e0       	ldi	r23, 0x03	; 3
    133a:	38 c0       	rjmp	.+112    	; 0x13ac <main+0x272>
				}
				if(seconds*2 == position){
    133c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	41 f1       	breq	.+80     	; 0x139e <main+0x264>
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
    134e:	b6 01       	movw	r22, r12
    1350:	2d c0       	rjmp	.+90     	; 0x13ac <main+0x272>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
    1352:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    1356:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    135a:	98 13       	cpse	r25, r24
    135c:	06 c0       	rjmp	.+12     	; 0x136a <main+0x230>
			if(hour_pos == position){
    135e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour_pos>
    1362:	98 17       	cp	r25, r24
    1364:	f9 f0       	breq	.+62     	; 0x13a4 <main+0x26a>
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
    1366:	b5 01       	movw	r22, r10
    1368:	21 c0       	rjmp	.+66     	; 0x13ac <main+0x272>
		}
		if(hour_pos == position){
    136a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    136e:	89 17       	cp	r24, r25
    1370:	e1 f0       	breq	.+56     	; 0x13aa <main+0x270>
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
    1372:	b7 01       	movw	r22, r14
    1374:	1b c0       	rjmp	.+54     	; 0x13ac <main+0x272>
	if(exactOneDot == 0){//sprawdzamy dalej
		if(exactMinute == 0){//we display on three dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnThreeDots;
    1376:	65 e5       	ldi	r22, 0x55	; 85
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	18 c0       	rjmp	.+48     	; 0x13ac <main+0x272>
					}
					return HoureAndMinutesOnThreeDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnThreeDots;
    137c:	65 ee       	ldi	r22, 0xE5	; 229
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <main+0x272>
				}
				return OnylHoureOnThreeDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnThreeDots;
    1382:	6d e9       	ldi	r22, 0x9D	; 157
    1384:	71 e0       	ldi	r23, 0x01	; 1
    1386:	12 c0       	rjmp	.+36     	; 0x13ac <main+0x272>
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
    1388:	61 e7       	ldi	r22, 0x71	; 113
    138a:	73 e0       	ldi	r23, 0x03	; 3
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <main+0x272>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
    138e:	b2 01       	movw	r22, r4
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <main+0x272>
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
    1392:	69 e0       	ldi	r22, 0x09	; 9
    1394:	72 e0       	ldi	r23, 0x02	; 2
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <main+0x272>
				}
				return  OnylHoureOnTwoDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
    1398:	61 ec       	ldi	r22, 0xC1	; 193
    139a:	71 e0       	ldi	r23, 0x01	; 1
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <main+0x272>
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
    139e:	65 e9       	ldi	r22, 0x95	; 149
    13a0:	73 e0       	ldi	r23, 0x03	; 3
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <main+0x272>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
    13a4:	65 e7       	ldi	r22, 0x75	; 117
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <main+0x272>
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
    13aa:	b4 01       	movw	r22, r8
	if(fSecondTimerFlag())
	{
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
    13ac:	8f e2       	ldi	r24, 0x2F	; 47
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
    13b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
	if(exactOneDot == 2){
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <main+0x28a>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
    13be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exactOneDot>
    13c2:	0c c0       	rjmp	.+24     	; 0x13dc <main+0x2a2>
	if(exactOneDot == 2){
		exactOneDot = 0;
    13c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exactOneDot>
		exactMinute ++;
    13c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
    13cc:	8f 5f       	subi	r24, 0xFF	; 255
		if(exactMinute == 5){
    13ce:	85 30       	cpi	r24, 0x05	; 5
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <main+0x29e>
*/
inline void actualizePosition(){
	exactOneDot ++;
	if(exactOneDot == 2){
		exactOneDot = 0;
		exactMinute ++;
    13d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <exactMinute>
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <main+0x2a2>
		if(exactMinute == 5){
			exactMinute = 0;
    13d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exactMinute>
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
	actualizePosition();
	(position>=120-1) ? position=0 : position++;
    13dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    13e0:	87 37       	cpi	r24, 0x77	; 119
    13e2:	18 f0       	brcs	.+6      	; 0x13ea <main+0x2b0>
    13e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <main+0x2b6>
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
	D1inputpull();
	//D1input();
}
inline uint8_t readPosControl()
{
	return PIND & (1<<PIND1);
    13f0:	89 b1       	in	r24, 0x09	; 9
    13f2:	82 70       	andi	r24, 0x02	; 2
		if (linesCounter==LINES_PER_FRAME-1)
		{
			resetDisplayTimer(); // make sure that timer will not interrupt us.
			calculateLineAndRabin();	// calculate while waiting for synchronization
			// IO signal will take longer than calculation.
			volatile uint8_t posStatuts= readPosControl();
    13f4:	89 83       	std	Y+1, r24	; 0x01
			while(posStatuts)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 23       	and	r24, r24
    13fa:	49 f0       	breq	.+18     	; 0x140e <main+0x2d4>
		displayInterruptProd();
}

inline void resetDisplayTimer()
{
	TCNT1=0;
    13fc:	f8 01       	movw	r30, r16
    13fe:	11 82       	std	Z+1, r1	; 0x01
    1400:	10 82       	st	Z, r1
	D1inputpull();
	//D1input();
}
inline uint8_t readPosControl()
{
	return PIND & (1<<PIND1);
    1402:	89 b1       	in	r24, 0x09	; 9
    1404:	82 70       	andi	r24, 0x02	; 2
			// IO signal will take longer than calculation.
			volatile uint8_t posStatuts= readPosControl();
			while(posStatuts)
			{
				resetDisplayTimer();
				posStatuts= readPosControl();
    1406:	89 83       	std	Y+1, r24	; 0x01
		{
			resetDisplayTimer(); // make sure that timer will not interrupt us.
			calculateLineAndRabin();	// calculate while waiting for synchronization
			// IO signal will take longer than calculation.
			volatile uint8_t posStatuts= readPosControl();
			while(posStatuts)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	81 11       	cpse	r24, r1
    140c:	f7 cf       	rjmp	.-18     	; 0x13fc <main+0x2c2>
		displayInterruptProd();
}

inline void resetDisplayTimer()
{
	TCNT1=0;
    140e:	f8 01       	movw	r30, r16
    1410:	11 82       	std	Z+1, r1	; 0x01
    1412:	10 82       	st	Z, r1
}
/* display timer  INTERRUPT */
inline void displayInterruptProd()
{
	fDisplayed=true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <fDisplayed>
	display.Display();	
    141a:	8f e2       	ldi	r24, 0x2F	; 47
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13CDiagNeopixel7DisplayEv>
				posStatuts= readPosControl();
			}
			resetDisplayTimer(); // we set timer to 0 
			displayInterruptProd(); // and call our "fake" interrupt. 
			//we made it like timer made the tick for us.
			linesCounter=0;
    1422:	71 2c       	mov	r7, r1
    1424:	be ce       	rjmp	.-644    	; 0x11a2 <main+0x68>


/* Timer functions */
inline uint8_t fSecondTimerFlag()
{
	if(secondTimerFlag)
    1426:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <main+0x2f6>
    142e:	42 c0       	rjmp	.+132    	; 0x14b4 <main+0x37a>
	{
		secondTimerFlag=0;
    1430:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	if(seconds>=30)
		min_pos++;
}
inline void addSecond()
{
	if(seconds==59){
    1434:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
    1438:	8b 33       	cpi	r24, 0x3B	; 59
    143a:	b9 f4       	brne	.+46     	; 0x146a <main+0x330>
		seconds=0;
    143c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
		if(minutes==59)
    1440:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1444:	8b 33       	cpi	r24, 0x3B	; 59
    1446:	69 f4       	brne	.+26     	; 0x1462 <main+0x328>
		{
			minutes=0;
    1448:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			if(hour==11)
    144c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
    1450:	8b 30       	cpi	r24, 0x0B	; 11
    1452:	19 f4       	brne	.+6      	; 0x145a <main+0x320>
				hour=0;
    1454:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
    1458:	1a c1       	rjmp	.+564    	; 0x168e <main+0x554>
			else
				hour++;
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
    1460:	16 c1       	rjmp	.+556    	; 0x168e <main+0x554>
		}
		else
			minutes++;
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <main+0x336>
	}
	else
		seconds++;
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
    1470:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
    1474:	83 2f       	mov	r24, r19
	hour_pos=hour*10; 
    1476:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hour>
    147a:	99 0f       	add	r25, r25
    147c:	29 2f       	mov	r18, r25
    147e:	22 0f       	add	r18, r18
    1480:	22 0f       	add	r18, r18
    1482:	92 0f       	add	r25, r18
    1484:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	while(tmp>=6)	
    1488:	36 30       	cpi	r19, 0x06	; 6
    148a:	54 f0       	brlt	.+20     	; 0x14a0 <main+0x366>
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <main+0x358>
    1490:	92 2f       	mov	r25, r18
    1492:	86 50       	subi	r24, 0x06	; 6
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	29 0f       	add	r18, r25
    1498:	86 30       	cpi	r24, 0x06	; 6
    149a:	d4 f7       	brge	.-12     	; 0x1490 <main+0x356>
    149c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <hour_pos>
	{
		hour_pos++;
		tmp-=6;
	}
	min_pos=2*minutes;
    14a0:	33 0f       	add	r19, r19
    14a2:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
	if(seconds>=30)
    14a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
    14aa:	8e 31       	cpi	r24, 0x1E	; 30
    14ac:	18 f0       	brcs	.+6      	; 0x14b4 <main+0x37a>
		min_pos++;
    14ae:	3f 5f       	subi	r19, 0xFF	; 255
    14b0:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <min_pos>
 * 		.niddlePosition's
 * we start displaying from 12
*/
inline uint8_t* calculateLine(){
	/* First we need to chose if we need to display one,two or three dotted clock's frame */
	if(exactOneDot == 0){//sprawdzamy dalej
    14b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
    14b8:	81 11       	cpse	r24, r1
    14ba:	87 c0       	rjmp	.+270    	; 0x15ca <main+0x490>
		if(exactMinute == 0){//we display on three dots
    14bc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
    14c0:	81 11       	cpse	r24, r1
    14c2:	44 c0       	rjmp	.+136    	; 0x154c <main+0x412>
			if(hour_pos == position){
    14c4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    14c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    14cc:	98 13       	cpse	r25, r24
    14ce:	20 c0       	rjmp	.+64     	; 0x1510 <main+0x3d6>
				if(min_pos == position){
    14d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
    14d4:	98 13       	cpse	r25, r24
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <main+0x3ba>
					if(seconds*2 == position){
    14d8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	22 0f       	add	r18, r18
    14e0:	33 1f       	adc	r19, r19
    14e2:	89 2f       	mov	r24, r25
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	09 f4       	brne	.+2      	; 0x14ee <main+0x3b4>
    14ec:	80 c0       	rjmp	.+256    	; 0x15ee <main+0x4b4>
						return HoureMinuteSecondOnThreeDots;
					}
					return HoureAndMinutesOnThreeDots;
    14ee:	6d e2       	ldi	r22, 0x2D	; 45
    14f0:	72 e0       	ldi	r23, 0x02	; 2
    14f2:	98 c0       	rjmp	.+304    	; 0x1624 <main+0x4ea>
				}
				if(seconds*2 == position){
    14f4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	89 2f       	mov	r24, r25
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	28 17       	cp	r18, r24
    1504:	39 07       	cpc	r19, r25
    1506:	09 f4       	brne	.+2      	; 0x150a <main+0x3d0>
    1508:	75 c0       	rjmp	.+234    	; 0x15f4 <main+0x4ba>
					return HouresAndSecondsOnThreeDots;
				}
				return OnylHoureOnThreeDots;
    150a:	69 e9       	ldi	r22, 0x99	; 153
    150c:	72 e0       	ldi	r23, 0x02	; 2
    150e:	8a c0       	rjmp	.+276    	; 0x1624 <main+0x4ea>
			}else{
				if(min_pos == position){
    1510:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    1514:	89 13       	cpse	r24, r25
    1516:	0d c0       	rjmp	.+26     	; 0x1532 <main+0x3f8>
					if(seconds*2 == position){
    1518:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	28 17       	cp	r18, r24
    1526:	39 07       	cpc	r19, r25
    1528:	09 f4       	brne	.+2      	; 0x152c <main+0x3f2>
    152a:	67 c0       	rjmp	.+206    	; 0x15fa <main+0x4c0>
						return MinuteAndSecondsOnThreeDots;
					}
					return OnylMinuteOnThreeDots;
    152c:	65 e0       	ldi	r22, 0x05	; 5
    152e:	73 e0       	ldi	r23, 0x03	; 3
    1530:	79 c0       	rjmp	.+242    	; 0x1624 <main+0x4ea>
				}
				if(seconds*2 == position){
    1532:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	28 17       	cp	r18, r24
    1540:	39 07       	cpc	r19, r25
    1542:	09 f4       	brne	.+2      	; 0x1546 <main+0x40c>
    1544:	5d c0       	rjmp	.+186    	; 0x1600 <main+0x4c6>
					return OnylSecondsOnThreeDots;
				}
				return NoNiddleThreeDots;
    1546:	69 eb       	ldi	r22, 0xB9	; 185
    1548:	73 e0       	ldi	r23, 0x03	; 3
    154a:	6c c0       	rjmp	.+216    	; 0x1624 <main+0x4ea>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
    154c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    1550:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    1554:	98 13       	cpse	r25, r24
    1556:	1e c0       	rjmp	.+60     	; 0x1594 <main+0x45a>
				if(min_pos == position){
    1558:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <min_pos>
    155c:	98 13       	cpse	r25, r24
    155e:	0e c0       	rjmp	.+28     	; 0x157c <main+0x442>
					if(seconds*2 == position){
    1560:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	89 2f       	mov	r24, r25
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	28 17       	cp	r18, r24
    1570:	39 07       	cpc	r19, r25
    1572:	09 f4       	brne	.+2      	; 0x1576 <main+0x43c>
    1574:	48 c0       	rjmp	.+144    	; 0x1606 <main+0x4cc>
						return HoureMinuteSecondOnTwoDots;
					}
					return HoureAndMinutesOnTwoDots;
    1576:	61 e5       	ldi	r22, 0x51	; 81
    1578:	72 e0       	ldi	r23, 0x02	; 2
    157a:	54 c0       	rjmp	.+168    	; 0x1624 <main+0x4ea>
				}
				if(seconds*2 == position){
    157c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	22 0f       	add	r18, r18
    1584:	33 1f       	adc	r19, r19
    1586:	89 2f       	mov	r24, r25
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	28 17       	cp	r18, r24
    158c:	39 07       	cpc	r19, r25
    158e:	e9 f1       	breq	.+122    	; 0x160a <main+0x4d0>
					return HouresAndSecondsOnTwoDots;
				}
				return  OnylHoureOnTwoDots;
    1590:	b1 01       	movw	r22, r2
    1592:	48 c0       	rjmp	.+144    	; 0x1624 <main+0x4ea>
			}else{
				if(min_pos == position){
    1594:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    1598:	89 13       	cpse	r24, r25
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <main+0x47a>
					if(seconds*2 == position){
    159c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	28 17       	cp	r18, r24
    15aa:	39 07       	cpc	r19, r25
    15ac:	89 f1       	breq	.+98     	; 0x1610 <main+0x4d6>
						return MinuteAndSecondsOnTwoDots;
					}
					return OnylMinuteOnTwoDots;
    15ae:	69 e2       	ldi	r22, 0x29	; 41
    15b0:	73 e0       	ldi	r23, 0x03	; 3
    15b2:	38 c0       	rjmp	.+112    	; 0x1624 <main+0x4ea>
				}
				if(seconds*2 == position){
    15b4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <seconds>
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	41 f1       	breq	.+80     	; 0x1616 <main+0x4dc>
					return OnylSecondsOnTwoDots;
				}
				return NoNiddleTwoDots;
    15c6:	b6 01       	movw	r22, r12
    15c8:	2d c0       	rjmp	.+90     	; 0x1624 <main+0x4ea>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
    15ca:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <min_pos>
    15ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    15d2:	98 13       	cpse	r25, r24
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <main+0x4a8>
			if(hour_pos == position){
    15d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour_pos>
    15da:	98 17       	cp	r25, r24
    15dc:	f9 f0       	breq	.+62     	; 0x161c <main+0x4e2>
				return HoureAndMinutesOnOneDot;
			}
			return OnylMinuteOnOneDot;
    15de:	b5 01       	movw	r22, r10
    15e0:	21 c0       	rjmp	.+66     	; 0x1624 <main+0x4ea>
		}
		if(hour_pos == position){
    15e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <hour_pos>
    15e6:	89 17       	cp	r24, r25
    15e8:	e1 f0       	breq	.+56     	; 0x1622 <main+0x4e8>
			return OnylHoureOnOneDot;
		}
		return NoNiddleOneDot;
    15ea:	b7 01       	movw	r22, r14
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <main+0x4ea>
	if(exactOneDot == 0){//sprawdzamy dalej
		if(exactMinute == 0){//we display on three dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnThreeDots;
    15ee:	65 e5       	ldi	r22, 0x55	; 85
    15f0:	71 e0       	ldi	r23, 0x01	; 1
    15f2:	18 c0       	rjmp	.+48     	; 0x1624 <main+0x4ea>
					}
					return HoureAndMinutesOnThreeDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnThreeDots;
    15f4:	65 ee       	ldi	r22, 0xE5	; 229
    15f6:	71 e0       	ldi	r23, 0x01	; 1
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <main+0x4ea>
				}
				return OnylHoureOnThreeDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnThreeDots;
    15fa:	6d e9       	ldi	r22, 0x9D	; 157
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	12 c0       	rjmp	.+36     	; 0x1624 <main+0x4ea>
					}
					return OnylMinuteOnThreeDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnThreeDots;
    1600:	61 e7       	ldi	r22, 0x71	; 113
    1602:	73 e0       	ldi	r23, 0x03	; 3
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <main+0x4ea>
			}
		}else{//we display on 2 dots
			if(hour_pos == position){
				if(min_pos == position){
					if(seconds*2 == position){
						return HoureMinuteSecondOnTwoDots;
    1606:	b2 01       	movw	r22, r4
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <main+0x4ea>
					}
					return HoureAndMinutesOnTwoDots;
				}
				if(seconds*2 == position){
					return HouresAndSecondsOnTwoDots;
    160a:	69 e0       	ldi	r22, 0x09	; 9
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <main+0x4ea>
				}
				return  OnylHoureOnTwoDots;
			}else{
				if(min_pos == position){
					if(seconds*2 == position){
						return MinuteAndSecondsOnTwoDots;
    1610:	61 ec       	ldi	r22, 0xC1	; 193
    1612:	71 e0       	ldi	r23, 0x01	; 1
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <main+0x4ea>
					}
					return OnylMinuteOnTwoDots;
				}
				if(seconds*2 == position){
					return OnylSecondsOnTwoDots;
    1616:	65 e9       	ldi	r22, 0x95	; 149
    1618:	73 e0       	ldi	r23, 0x03	; 3
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <main+0x4ea>
			}
		}
	}else{//we display on one dot
		if(min_pos == position){
			if(hour_pos == position){
				return HoureAndMinutesOnOneDot;
    161c:	65 e7       	ldi	r22, 0x75	; 117
    161e:	72 e0       	ldi	r23, 0x02	; 2
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <main+0x4ea>
			}
			return OnylMinuteOnOneDot;
		}
		if(hour_pos == position){
			return OnylHoureOnOneDot;
    1622:	b4 01       	movw	r22, r8
	if(fSecondTimerFlag())
	{
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
    1624:	8f e2       	ldi	r24, 0x2F	; 47
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN13CDiagNeopixel18SetLedRGBfromTableEPh>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
    162c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exactOneDot>
    1630:	8f 5f       	subi	r24, 0xFF	; 255
	if(exactOneDot == 2){
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	19 f0       	breq	.+6      	; 0x163c <main+0x502>
	 * ASSUMPTION:
	 *		we have 120 lines per rotation
	 * 		in other case it shall be modified
*/
inline void actualizePosition(){
	exactOneDot ++;
    1636:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <exactOneDot>
    163a:	0c c0       	rjmp	.+24     	; 0x1654 <main+0x51a>
	if(exactOneDot == 2){
		exactOneDot = 0;
    163c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exactOneDot>
		exactMinute ++;
    1640:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <exactMinute>
    1644:	8f 5f       	subi	r24, 0xFF	; 255
		if(exactMinute == 5){
    1646:	85 30       	cpi	r24, 0x05	; 5
    1648:	19 f0       	breq	.+6      	; 0x1650 <main+0x516>
*/
inline void actualizePosition(){
	exactOneDot ++;
	if(exactOneDot == 2){
		exactOneDot = 0;
		exactMinute ++;
    164a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <exactMinute>
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <main+0x51a>
		if(exactMinute == 5){
			exactMinute = 0;
    1650:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exactMinute>
		addSecond();
		calculateHands();
	}
	display.SetLedRGBfromTable(calculateLine());
	actualizePosition();
	(position>=120-1) ? position=0 : position++;
    1654:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
    1658:	87 37       	cpi	r24, 0x77	; 119
    165a:	18 f0       	brcs	.+6      	; 0x1662 <main+0x528>
    165c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <main+0x52e>
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
}


inline void waitForTimer()
{
	while(!fDisplayed)
    1668:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fDisplayed>
    166c:	88 23       	and	r24, r24
    166e:	e1 f3       	breq	.-8      	; 0x1668 <main+0x52e>
		;
	fDisplayed=false;
    1670:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fDisplayed>
		}
		else
		{
			calculateLineAndRabin();
			waitForTimer();
			linesCounter++;
    1674:	73 94       	inc	r7
    1676:	95 cd       	rjmp	.-1238   	; 0x11a2 <main+0x68>
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
	hour_pos=hour*10; 
    1678:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
    167c:	88 0f       	add	r24, r24
    167e:	98 2f       	mov	r25, r24
    1680:	99 0f       	add	r25, r25
    1682:	99 0f       	add	r25, r25
    1684:	89 0f       	add	r24, r25
    1686:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour_pos>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	cd cd       	rjmp	.-1126   	; 0x1228 <main+0xee>
	hour_pos=hour*10; 
    168e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
    1692:	88 0f       	add	r24, r24
    1694:	98 2f       	mov	r25, r24
    1696:	99 0f       	add	r25, r25
    1698:	99 0f       	add	r25, r25
    169a:	89 0f       	add	r24, r25
    169c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour_pos>
/* 
 *It calculate current niddle positions
*/
inline void calculateHands()
{
	int_fast8_t tmp=minutes;
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	fe ce       	rjmp	.-516    	; 0x14a0 <main+0x366>

000016a4 <_GLOBAL__sub_I_NoNiddleOneDot>:

/* The buffer that points which frame we need to to display */
uint8_t TestWhiteLine[3*12];

volatile uint8_t fDisplayed=false;
CDiagNeopixel display;
    16a4:	8f e2       	ldi	r24, 0x2F	; 47
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN13CDiagNeopixelC1Ev>
    16ac:	08 95       	ret

000016ae <__tablejump2__>:
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	05 90       	lpm	r0, Z+
    16b4:	f4 91       	lpm	r31, Z
    16b6:	e0 2d       	mov	r30, r0
    16b8:	09 94       	ijmp

000016ba <_exit>:
    16ba:	f8 94       	cli

000016bc <__stop_program>:
    16bc:	ff cf       	rjmp	.-2      	; 0x16bc <__stop_program>
